package de.tudresden.webofthingstokenization.App;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.9.
 */
@SuppressWarnings("rawtypes")
public class GovernorMock extends Contract {
    public static final String BINARY = "6101606040523480156200001257600080fd5b5060405162003e8938038062003e89833981016040819052620000359162000826565b80848484600089806200005c6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000102925060009150602084019062000757565b50620001109050836200014d565b6200011b826200018e565b620001268162000235565b5050506001600160a01b031661014052620001418162000276565b50505050505062000995565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b60008111620001f45760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6064811115620002fb5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620001eb565b600062000307620003ee565b90508015801590620003195750600854155b15620003945760086000016040518060400160405280600063ffffffff16815260200162000352846200042660201b620011c11760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b620003af8260086200049560201b6200122e1790919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600854600090156200041f57620004116008620004e860201b620012641760201c565b6001600160e01b0316905090565b5060075490565b60006001600160e01b03821115620004915760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620001eb565b5090565b600080620004d284600001620004b6436200053660201b620012ab1760201c565b620004cc866200042660201b620011c11760201c565b6200059d565b6001600160e01b03918216969116945092505050565b805460009080156200052c5762000514836200050660018462000932565b600091825260209091200190565b5464010000000090046001600160e01b03166200052f565b60005b9392505050565b600063ffffffff821115620004915760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620001eb565b825460009081908015620006f9576000620005bf876200050660018562000932565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620006435760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401620001eb565b8563ffffffff16816000015163ffffffff1614156200069857846200066f886200050660018662000932565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620006e8565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506200074f9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050815b935093915050565b828054620007659062000958565b90600052602060002090601f016020900481019282620007895760008555620007d4565b82601f10620007a457805160ff1916838001178555620007d4565b82800160010185558215620007d4579182015b82811115620007d4578251825591602001919060010190620007b7565b50620004919291505b80821115620004915760008155600101620007dd565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200082157600080fd5b919050565b600080600080600060a086880312156200083f57600080fd5b85516001600160401b03808211156200085757600080fd5b818801915088601f8301126200086c57600080fd5b815181811115620008815762000881620007f3565b604051601f8201601f19908116603f01168101908382118183101715620008ac57620008ac620007f3565b81604052828152602093508b84848701011115620008c957600080fd5b600091505b82821015620008ed5784820184015181830185015290830190620008ce565b82821115620008ff5760008484830101525b98506200091191505088820162000809565b604089015160608a01516080909a0151989b919a5098979650945050505050565b6000828210156200095357634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200096d57607f821691505b602082108114156200098f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161348b620009fe600039600081816107b80152818161112b0152611acf01526000611e7a01526000611ec901526000611ea401526000611dfd01526000611e2701526000611e51015261348b6000f3fe6080604052600436106102295760003560e01c806370b0f66011610123578063c28bc2fa116100ab578063eb9019d41161006f578063eb9019d41461071a578063ece40cc11461073a578063f23a6e611461075a578063f8ce560a14610786578063fc0c546a146107a657600080fd5b8063c28bc2fa1461064d578063c59057e414610660578063dd4e2ba514610680578063deaaa7cc146106c6578063ea0217cf146106fa57600080fd5b80639a802a6d116100f25780639a802a6d146105b7578063a7713a70146105d7578063b58131b0146105ec578063bc197c8114610601578063c01f9e371461062d57600080fd5b806370b0f660146105435780637b3c71d3146105635780637d5e81e21461058357806397c3d334146105a357600080fd5b80633932abb1116101b1578063544ffc9c11610175578063544ffc9c1461046457806354fd4d50146104b957806356781388146104e35780635f398a141461050357806360c4247f1461052357600080fd5b80633932abb1146103985780633bccf4fd146103ad5780633e4f49e6146103cd57806343859632146103fa578063452115d61461044457600080fd5b806306fdde03116101f857806306fdde03146102cb578063150b7a02146102ed5780632656227d146103315780632d63f693146103445780632fe3e2611461036457600080fd5b806301ffc9a71461023757806302a251a31461026c578063034201811461028b57806306f3f9e6146102ab57600080fd5b3661023257005b005b600080fd5b34801561024357600080fd5b506102576102523660046126b4565b6107f2565b60405190151581526020015b60405180910390f35b34801561027857600080fd5b506005545b604051908152602001610263565b34801561029757600080fd5b5061027d6102a63660046127f2565b61085f565b3480156102b757600080fd5b506102306102c6366004612898565b610957565b3480156102d757600080fd5b506102e06109a7565b604051610263919061290d565b3480156102f957600080fd5b50610318610308366004612937565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610263565b61027d61033f366004612b0d565b610a39565b34801561035057600080fd5b5061027d61035f366004612898565b610b60565b34801561037057600080fd5b5061027d7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b3480156103a457600080fd5b5060045461027d565b3480156103b957600080fd5b5061027d6103c8366004612b9c565b610b97565b3480156103d957600080fd5b506103ed6103e8366004612898565b610c0d565b6040516102639190612c00565b34801561040657600080fd5b50610257610415366004612c28565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561045057600080fd5b5061027d61045f366004612b0d565b610d19565b34801561047057600080fd5b5061049e61047f366004612898565b6000908152600960205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610263565b3480156104c557600080fd5b506040805180820190915260018152603160f81b60208201526102e0565b3480156104ef57600080fd5b5061027d6104fe366004612c54565b610d30565b34801561050f57600080fd5b5061027d61051e366004612c77565b610d59565b34801561052f57600080fd5b5061027d61053e366004612898565b610da3565b34801561054f57600080fd5b5061023061055e366004612898565b610e38565b34801561056f57600080fd5b5061027d61057e366004612cfa565b610e7c565b34801561058f57600080fd5b5061027d61059e366004612d53565b610ece565b3480156105af57600080fd5b50606461027d565b3480156105c357600080fd5b5061027d6105d2366004612e07565b610edc565b3480156105e357600080fd5b5061027d610ef3565b3480156105f857600080fd5b5061027d610f1f565b34801561060d57600080fd5b5061031861061c366004612e5d565b63bc197c8160e01b95945050505050565b34801561063957600080fd5b5061027d610648366004612898565b610f2a565b61023061065b366004612eec565b610f59565b34801561066c57600080fd5b5061027d61067b366004612b0d565b611025565b34801561068c57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102e0565b3480156106d257600080fd5b5061027d7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561070657600080fd5b50610230610715366004612898565b61105f565b34801561072657600080fd5b5061027d610735366004612f2d565b6110a3565b34801561074657600080fd5b50610230610755366004612898565b6110c4565b34801561076657600080fd5b50610318610775366004612f57565b63f23a6e6160e01b95945050505050565b34801561079257600080fd5b5061027d6107a1366004612898565b611108565b3480156107b257600080fd5b506107da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610263565b60006001600160e01b0319821663bf26d89760e01b148061082357506001600160e01b031982166379dd796f60e01b145b8061083e57506001600160e01b03198216630271189760e51b145b8061085957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806109036108fb7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c60405161089b929190612fbb565b60405180910390208b805190602001206040516020016108e0959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611310565b86868661135e565b90506109498a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d925061137c915050565b9a9950505050505050505050565b33301461097f5760405162461bcd60e51b815260040161097690612fcb565b60405180910390fd5b61099b565b8061098f60026114de565b1461099957610984565b505b6109a48161155d565b50565b6060600080546109b690613002565b80601f01602080910402602001604051908101604052809291908181526020018280546109e290613002565b8015610a2f5780601f10610a0457610100808354040283529160200191610a2f565b820191906000526020600020905b815481529060010190602001808311610a1257829003601f168201915b5050505050905090565b600080610a4886868686611025565b90506000610a5582610c0d565b90506004816007811115610a6b57610a6b612bea565b1480610a8857506005816007811115610a8657610a86612bea565b145b610ade5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b6064820152608401610976565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610b3c82888888886116a9565b610b498288888888611737565b610b5682888888886116a9565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610be5906108fb906080016108e0565b9050610c028782886040518060200160405280600081525061182d565b979650505050505050565b6000818152600160205260408120600281015460ff1615610c315750600792915050565b6002810154610100900460ff1615610c4c5750600292915050565b6000610c5784610b60565b905080610ca65760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610976565b438110610cb7575060009392505050565b6000610cc285610f2a565b9050438110610cd657506001949350505050565b610cdf85611850565b8015610cfe575060008581526009602052604090208054600190910154115b15610d0e57506004949350505050565b506003949350505050565b6000610d2785858585611887565b95945050505050565b600080339050610d518482856040518060200160405280600081525061182d565b949350505050565b600080339050610c0287828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061137c915050565b60085460009080610db8575050600754919050565b60006008610dc7600184613053565b81548110610dd757610dd761306a565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410610e2d57602001516001600160e01b03169392505050565b610d516008856119a5565b333014610e575760405162461bcd60e51b815260040161097690612fcb565b610e73565b80610e6760026114de565b14610e7157610e5c565b505b6109a481611a57565b600080339050610ec486828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061182d92505050565b9695505050505050565b6000610d2785858585611a98565b6000610ee9848484611aa6565b90505b9392505050565b60085460009015610f1657610f086008611264565b6001600160e01b0316905090565b6007545b905090565b6000610f1a60065490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610b88565b333014610f785760405162461bcd60e51b815260040161097690612fcb565b610f94565b80610f8860026114de565b14610f9257610f7d565b505b600080856001600160a01b0316858585604051610fb2929190612fbb565b60006040518083038185875af1925050503d8060008114610fef576040519150601f19603f3d011682016040523d82523d6000602084013e610ff4565b606091505b509150915061101c828260405180606001604052806028815260200161340760289139611b4b565b50505050505050565b60008484848460405160200161103e9493929190613149565b60408051601f19818403018152919052805160209091012095945050505050565b33301461107e5760405162461bcd60e51b815260040161097690612fcb565b61109a565b8061108e60026114de565b1461109857611083565b505b6109a481611b64565b6000610eec83836110bf60408051602081019091526000815290565b611aa6565b3330146110e35760405162461bcd60e51b815260040161097690612fcb565b6110ff565b806110f360026114de565b146110fd576110e8565b505b6109a481611c05565b6000606461111583610da3565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c9060240160206040518083038186803b15801561117557600080fd5b505afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad9190613194565b6111b791906131ad565b61085991906131cc565b60006001600160e01b0382111561122a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610976565b5090565b60008061124c8461123e436112ab565b611247866111c1565b611c46565b6001600160e01b0391821693501690505b9250929050565b805460009080156112a25761128c8361127e600184613053565b600091825260209091200190565b54600160201b90046001600160e01b0316610eec565b60009392505050565b600063ffffffff82111561122a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610976565b600061085961131d611df0565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061136f87878787611f17565b91509150610b5681611fdb565b600085815260016020819052604082209061139688610c0d565b60078111156113a7576113a7612bea565b146114005760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610976565b604080516020810190915281546001600160401b03169081905260009061142990889086611aa6565b90506114388888888488612129565b835161148a57866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48988848960405161147d94939291906131ee565b60405180910390a2610c02565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb871289888489896040516114cb959493929190613216565b60405180910390a2979650505050505050565b60006114f98254600f81810b600160801b909204900b131590565b1561151757604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60648111156115e05760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610976565b60006115ea610ef3565b905080158015906115fb5750600854155b1561165f5760408051808201909152600081526008906020810161161e846111c1565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61166a60088361122e565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b611730565b845181101561172e57306001600160a01b03168582815181106116d3576116d361306a565b60200260200101516001600160a01b0316141561171e5761171e8382815181106116ff576116ff61306a565b60200260200101518051906020012060026122a890919063ffffffff16565b6117278161325c565b90506116ae565b505b5050505050565b600060405180606001604052806027815260200161342f60279139905060005b855181101561101c576000808783815181106117755761177561306a565b60200260200101516001600160a01b03168784815181106117985761179861306a565b60200260200101518785815181106117b2576117b261306a565b60200260200101516040516117c79190613277565b60006040518083038185875af1925050503d8060008114611804576040519150601f19603f3d011682016040523d82523d6000602084013e611809565b606091505b5091509150611819828286611b4b565b505050806118269061325c565b9050611757565b6000610d278585858561184b60408051602081019091526000815290565b61137c565b6000818152600960205260408120600281015460018201546118729190613293565b61187e6107a185610b60565b11159392505050565b60008061189686868686611025565b905060006118a382610c0d565b905060028160078111156118b9576118b9612bea565b141580156118d9575060068160078111156118d6576118d6612bea565b14155b80156118f7575060078160078111156118f4576118f4612bea565b14155b6119435760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610976565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c906119939084815260200190565b60405180910390a15095945050505050565b60004382106119f65760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610976565b6000611a01836112ab565b84549091506000611a14868483856122e4565b90508015611a4157611a2b8661127e600184613053565b54600160201b90046001600160e01b0316611a44565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b6000610d2785858585612342565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a89060440160206040518083038186803b158015611b1357600080fd5b505afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190613194565b60608315611b5a575081610eec565b610eec8383612607565b60008111611bc45760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610976565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b825460009081908015611d93576000611c648761127e600185613053565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b031660208401529192509087161015611ce55760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401610976565b8563ffffffff16816000015163ffffffff161415611d345784611d0d8861127e600186613053565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055611d83565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b602001519250839150611de89050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611e4957507f000000000000000000000000000000000000000000000000000000000000000046145b15611e7357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f4e5750600090506003611fd2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fa2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fcb57600060019250925050611fd2565b9150600090505b94509492505050565b6000816004811115611fef57611fef612bea565b1415611ff85750565b600181600481111561200c5761200c612bea565b141561205a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610976565b600281600481111561206e5761206e612bea565b14156120bc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610976565b60038160048111156120d0576120d0612bea565b14156109a45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610976565b60008581526009602090815260408083206001600160a01b0388168452600381019092529091205460ff16156121b15760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610976565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff16141561220257828160000160008282546121f79190613293565b9091555061172e9050565b60ff84166001141561222257828160010160008282546121f79190613293565b60ff84166002141561224257828160020160008282546121f79190613293565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610976565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b60005b8183101561233a5760006122fb8484612631565b60008781526020902090915063ffffffff86169082015463ffffffff16111561232657809250612334565b612331816001613293565b93505b506122e7565b509392505050565b600061234c610f1f565b61235b33610735600143613053565b10156123c35760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610976565b60006123d88686868680519060200120611025565b905084518651146123fb5760405162461bcd60e51b8152600401610976906132ab565b835186511461241c5760405162461bcd60e51b8152600401610976906132ab565b600086511161246d5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610976565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156124ed5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610976565b60006125006124fb60045490565b61264c565b6125094361264c565b61251391906132ec565b905060006125236124fb60055490565b61252d90836132ec565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156125a5576125a5612735565b6040519080825280602002602001820160405280156125d857816020015b60608152602001906001900390816125c35790505b508c88888e6040516125f299989796959493929190613317565b60405180910390a15091979650505050505050565b8151156126175781518083602001fd5b8060405162461bcd60e51b8152600401610976919061290d565b600061264060028484186131cc565b610eec90848416613293565b60006001600160401b0382111561122a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610976565b6000602082840312156126c657600080fd5b81356001600160e01b031981168114610eec57600080fd5b803560ff811681146126ef57600080fd5b919050565b60008083601f84011261270657600080fd5b5081356001600160401b0381111561271d57600080fd5b60208301915083602082850101111561125d57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561277357612773612735565b604052919050565b60006001600160401b0383111561279457612794612735565b6127a7601f8401601f191660200161274b565b90508281528383830111156127bb57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126127e357600080fd5b610eec8383356020850161277b565b60008060008060008060008060e0898b03121561280e57600080fd5b8835975061281e60208a016126de565b965060408901356001600160401b038082111561283a57600080fd5b6128468c838d016126f4565b909850965060608b013591508082111561285f57600080fd5b5061286c8b828c016127d2565b94505061287b60808a016126de565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156128aa57600080fd5b5035919050565b60005b838110156128cc5781810151838201526020016128b4565b838111156128db576000848401525b50505050565b600081518084526128f98160208601602086016128b1565b601f01601f19169290920160200192915050565b602081526000610eec60208301846128e1565b80356001600160a01b03811681146126ef57600080fd5b6000806000806080858703121561294d57600080fd5b61295685612920565b935061296460208601612920565b92506040850135915060608501356001600160401b0381111561298657600080fd5b612992878288016127d2565b91505092959194509250565b60006001600160401b038211156129b7576129b7612735565b5060051b60200190565b600082601f8301126129d257600080fd5b813560206129e76129e28361299e565b61274b565b82815260059290921b84018101918181019086841115612a0657600080fd5b8286015b84811015612a2857612a1b81612920565b8352918301918301612a0a565b509695505050505050565b600082601f830112612a4457600080fd5b81356020612a546129e28361299e565b82815260059290921b84018101918181019086841115612a7357600080fd5b8286015b84811015612a285780358352918301918301612a77565b600082601f830112612a9f57600080fd5b81356020612aaf6129e28361299e565b82815260059290921b84018101918181019086841115612ace57600080fd5b8286015b84811015612a285780356001600160401b03811115612af15760008081fd5b612aff8986838b01016127d2565b845250918301918301612ad2565b60008060008060808587031215612b2357600080fd5b84356001600160401b0380821115612b3a57600080fd5b612b46888389016129c1565b95506020870135915080821115612b5c57600080fd5b612b6888838901612a33565b94506040870135915080821115612b7e57600080fd5b50612b8b87828801612a8e565b949793965093946060013593505050565b600080600080600060a08688031215612bb457600080fd5b85359450612bc4602087016126de565b9350612bd2604087016126de565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b6020810160088310612c2257634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215612c3b57600080fd5b82359150612c4b60208401612920565b90509250929050565b60008060408385031215612c6757600080fd5b82359150612c4b602084016126de565b600080600080600060808688031215612c8f57600080fd5b85359450612c9f602087016126de565b935060408601356001600160401b0380821115612cbb57600080fd5b612cc789838a016126f4565b90955093506060880135915080821115612ce057600080fd5b50612ced888289016127d2565b9150509295509295909350565b60008060008060608587031215612d1057600080fd5b84359350612d20602086016126de565b925060408501356001600160401b03811115612d3b57600080fd5b612d47878288016126f4565b95989497509550505050565b60008060008060808587031215612d6957600080fd5b84356001600160401b0380821115612d8057600080fd5b612d8c888389016129c1565b95506020870135915080821115612da257600080fd5b612dae88838901612a33565b94506040870135915080821115612dc457600080fd5b612dd088838901612a8e565b93506060870135915080821115612de657600080fd5b508501601f81018713612df857600080fd5b6129928782356020840161277b565b600080600060608486031215612e1c57600080fd5b612e2584612920565b92506020840135915060408401356001600160401b03811115612e4757600080fd5b612e53868287016127d2565b9150509250925092565b600080600080600060a08688031215612e7557600080fd5b612e7e86612920565b9450612e8c60208701612920565b935060408601356001600160401b0380821115612ea857600080fd5b612eb489838a01612a33565b94506060880135915080821115612eca57600080fd5b612ed689838a01612a33565b93506080880135915080821115612ce057600080fd5b60008060008060608587031215612f0257600080fd5b612f0b85612920565b93506020850135925060408501356001600160401b03811115612d3b57600080fd5b60008060408385031215612f4057600080fd5b612f4983612920565b946020939093013593505050565b600080600080600060a08688031215612f6f57600080fd5b612f7886612920565b9450612f8660208701612920565b9350604086013592506060860135915060808601356001600160401b03811115612faf57600080fd5b612ced888289016127d2565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061301657607f821691505b6020821081141561303757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156130655761306561303d565b500390565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156130b95781516001600160a01b031687529582019590820190600101613094565b509495945050505050565b600081518084526020808501945080840160005b838110156130b9578151875295820195908201906001016130d8565b600081518084526020808501808196508360051b8101915082860160005b8581101561313c57828403895261312a8483516128e1565b98850198935090840190600101613112565b5091979650505050505050565b60808152600061315c6080830187613080565b828103602084015261316e81876130c4565b9050828103604084015261318281866130f4565b91505082606083015295945050505050565b6000602082840312156131a657600080fd5b5051919050565b60008160001904831182151516156131c7576131c761303d565b500290565b6000826131e957634e487b7160e01b600052601260045260246000fd5b500490565b84815260ff84166020820152826040820152608060608201526000610ec460808301846128e1565b85815260ff8516602082015283604082015260a06060820152600061323e60a08301856128e1565b828103608084015261325081856128e1565b98975050505050505050565b60006000198214156132705761327061303d565b5060010190565b600082516132898184602087016128b1565b9190910192915050565b600082198211156132a6576132a661303d565b500190565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b0380831681851680830382111561330e5761330e61303d565b01949350505050565b60006101208b8352602060018060a01b038c16818501528160408501526133408285018c613080565b91508382036060850152613354828b6130c4565b915083820360808501528189518084528284019150828160051b850101838c0160005b838110156133a557601f198784030185526133938383516128e1565b94860194925090850190600101613377565b505086810360a08801526133b9818c6130f4565b9450505050506133d460c08401876001600160401b03169052565b6001600160401b03851660e08401528281036101008401526133f681856128e1565b9c9b50505050505050505050505056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765a2646970667358221220afbc1dce366afcae024a3db8ee977d85b663755942fbb2812ba14151048bdce064736f6c63430008090033";

    public static final String FUNC_BALLOT_TYPEHASH = "BALLOT_TYPEHASH";

    public static final String FUNC_COUNTING_MODE = "COUNTING_MODE";

    public static final String FUNC_EXTENDED_BALLOT_TYPEHASH = "EXTENDED_BALLOT_TYPEHASH";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_CASTVOTEBYSIG = "castVoteBySig";

    public static final String FUNC_CASTVOTEWITHREASON = "castVoteWithReason";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMS = "castVoteWithReasonAndParams";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG = "castVoteWithReasonAndParamsBySig";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_GETVOTES = "getVotes";

    public static final String FUNC_GETVOTESWITHPARAMS = "getVotesWithParams";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_HASHPROPOSAL = "hashProposal";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";

    public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PROPOSALDEADLINE = "proposalDeadline";

    public static final String FUNC_PROPOSALSNAPSHOT = "proposalSnapshot";

    public static final String FUNC_PROPOSALTHRESHOLD = "proposalThreshold";

    public static final String FUNC_PROPOSALVOTES = "proposalVotes";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_QUORUM = "quorum";

    public static final String FUNC_QUORUMDENOMINATOR = "quorumDenominator";

    public static final String FUNC_quorumNumerator = "quorumNumerator";

    public static final String FUNC_RELAY = "relay";

    public static final String FUNC_SETPROPOSALTHRESHOLD = "setProposalThreshold";

    public static final String FUNC_SETVOTINGDELAY = "setVotingDelay";

    public static final String FUNC_SETVOTINGPERIOD = "setVotingPeriod";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_UPDATEQUORUMNUMERATOR = "updateQuorumNumerator";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTINGDELAY = "votingDelay";

    public static final String FUNC_VOTINGPERIOD = "votingPeriod";

    public static final Event PROPOSALCANCELED_EVENT = new Event("ProposalCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PROPOSALEXECUTED_EVENT = new Event("ProposalExecuted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALTHRESHOLDSET_EVENT = new Event("ProposalThresholdSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event QUORUMNUMERATORUPDATED_EVENT = new Event("QuorumNumeratorUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTECASTWITHPARAMS_EVENT = new Event("VoteCastWithParams", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTINGDELAYSET_EVENT = new Event("VotingDelaySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTINGPERIODSET_EVENT = new Event("VotingPeriodSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected GovernorMock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GovernorMock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GovernorMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GovernorMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ProposalCanceledEventResponse> getProposalCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROPOSALCANCELED_EVENT, transactionReceipt);
        ArrayList<ProposalCanceledEventResponse> responses = new ArrayList<ProposalCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCanceledEventResponse>() {
            @Override
            public ProposalCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCANCELED_EVENT, log);
                ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCANCELED_EVENT));
        return proposalCanceledEventFlowable(filter);
    }

    public List<ProposalCreatedEventResponse> getProposalCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.targets = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.signatures = (List<String>) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.calldatas = (List<byte[]>) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCreatedEventResponse>() {
            @Override
            public ProposalCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
                ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.targets = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.signatures = (List<String>) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.calldatas = (List<byte[]>) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public List<ProposalExecutedEventResponse> getProposalExecutedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROPOSALEXECUTED_EVENT, transactionReceipt);
        ArrayList<ProposalExecutedEventResponse> responses = new ArrayList<ProposalExecutedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalExecutedEventResponse>() {
            @Override
            public ProposalExecutedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALEXECUTED_EVENT, log);
                ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALEXECUTED_EVENT));
        return proposalExecutedEventFlowable(filter);
    }

    public List<ProposalThresholdSetEventResponse> getProposalThresholdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, transactionReceipt);
        ArrayList<ProposalThresholdSetEventResponse> responses = new ArrayList<ProposalThresholdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalThresholdSetEventResponse>() {
            @Override
            public ProposalThresholdSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, log);
                ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALTHRESHOLDSET_EVENT));
        return proposalThresholdSetEventFlowable(filter);
    }

    public List<QuorumNumeratorUpdatedEventResponse> getQuorumNumeratorUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, transactionReceipt);
        ArrayList<QuorumNumeratorUpdatedEventResponse> responses = new ArrayList<QuorumNumeratorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, QuorumNumeratorUpdatedEventResponse>() {
            @Override
            public QuorumNumeratorUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, log);
                QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUORUMNUMERATORUPDATED_EVENT));
        return quorumNumeratorUpdatedEventFlowable(filter);
    }

    public List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastEventResponse>() {
            @Override
            public VoteCastEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECAST_EVENT, log);
                VoteCastEventResponse typedResponse = new VoteCastEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public List<VoteCastWithParamsEventResponse> getVoteCastWithParamsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, transactionReceipt);
        ArrayList<VoteCastWithParamsEventResponse> responses = new ArrayList<VoteCastWithParamsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastWithParamsEventResponse>() {
            @Override
            public VoteCastWithParamsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, log);
                VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECASTWITHPARAMS_EVENT));
        return voteCastWithParamsEventFlowable(filter);
    }

    public List<VotingDelaySetEventResponse> getVotingDelaySetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTINGDELAYSET_EVENT, transactionReceipt);
        ArrayList<VotingDelaySetEventResponse> responses = new ArrayList<VotingDelaySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingDelaySetEventResponse>() {
            @Override
            public VotingDelaySetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGDELAYSET_EVENT, log);
                VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGDELAYSET_EVENT));
        return votingDelaySetEventFlowable(filter);
    }

    public List<VotingPeriodSetEventResponse> getVotingPeriodSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTINGPERIODSET_EVENT, transactionReceipt);
        ArrayList<VotingPeriodSetEventResponse> responses = new ArrayList<VotingPeriodSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingPeriodSetEventResponse>() {
            @Override
            public VotingPeriodSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGPERIODSET_EVENT, log);
                VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGPERIODSET_EVENT));
        return votingPeriodSetEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> COUNTING_MODE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTING_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> EXTENDED_BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTENDED_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> cancel(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] salt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(salt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger proposalId, BigInteger support) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteBySig(BigInteger proposalId, BigInteger support, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReason(BigInteger proposalId, BigInteger support, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASON, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParams(BigInteger proposalId, BigInteger support, String reason, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParamsBySig(BigInteger proposalId, BigInteger support, String reason, byte[] params, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getVotes(String account, BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getVotesWithParams(String account, BigInteger blockNumber, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTESWITHPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(BigInteger proposalId, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> hashProposal(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155BatchReceived(String param0, String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155BATCHRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155Received(String param0, String param1, BigInteger param2, BigInteger param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.generated.Uint256(param3), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> proposalDeadline(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALDEADLINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalSnapshot(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> proposalVotes(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> propose(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, String description) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> quorum(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumDenominator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUMDENOMINATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> relay(String target, BigInteger value, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, target), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProposalThreshold(BigInteger newProposalThreshold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROPOSALTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newProposalThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingDelay(BigInteger newVotingDelay) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGDELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingPeriod(BigInteger newVotingPeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingPeriod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> state(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateQuorumNumerator(BigInteger newQuorumNumerator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEQUORUMNUMERATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newQuorumNumerator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> votingDelay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> votingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GovernorMock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorMock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GovernorMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorMock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GovernorMock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GovernorMock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GovernorMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GovernorMock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GovernorMock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorMock.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<GovernorMock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorMock.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorMock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorMock.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorMock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorMock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ProposalCanceledEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public String proposer;

        public List<String> targets;

        public List<BigInteger> values;

        public List<String> signatures;

        public List<byte[]> calldatas;

        public BigInteger startBlock;

        public BigInteger endBlock;

        public String description;
    }

    public static class ProposalExecutedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalThresholdSetEventResponse extends BaseEventResponse {
        public BigInteger oldProposalThreshold;

        public BigInteger newProposalThreshold;
    }

    public static class QuorumNumeratorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger oldQuorumNumerator;

        public BigInteger newQuorumNumerator;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;
    }

    public static class VoteCastWithParamsEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;

        public byte[] params;
    }

    public static class VotingDelaySetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingDelay;

        public BigInteger newVotingDelay;
    }

    public static class VotingPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingPeriod;

        public BigInteger newVotingPeriod;
    }
}
