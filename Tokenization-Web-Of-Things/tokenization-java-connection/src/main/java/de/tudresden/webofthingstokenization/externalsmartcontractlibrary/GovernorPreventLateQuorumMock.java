package de.tudresden.webofthingstokenization.externalsmartcontractlibrary;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class GovernorPreventLateQuorumMock extends Contract {
    public static final String BINARY = "6101606040523480156200001257600080fd5b5060405162003331380380620033318339810160408190526200003591620003d3565b8085858560008a806200005c6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620001029250600091506020840190620002e2565b506200011090508362000151565b6200011b8262000192565b620001268162000238565b5050506001600160a01b031661014052620001418162000279565b5050600a55506200052f92505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b60008111620001f75760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840160405180910390fd5b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b600854604080516001600160401b03928316815291831660208301527f7ca4ac117ed3cdce75c1161d8207c440389b1a15d69d096831664657c07dafc2910160405180910390a1600880546001600160401b0319166001600160401b0392909216919091179055565b828054620002f090620004f2565b90600052602060002090601f0160209004810192826200031457600085556200035f565b82601f106200032f57805160ff19168380011785556200035f565b828001600101855582156200035f579182015b828111156200035f57825182559160200191906001019062000342565b506200036d92915062000371565b5090565b5b808211156200036d576000815560010162000372565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003b657600080fd5b919050565b80516001600160401b0381168114620003b657600080fd5b60008060008060008060c08789031215620003ed57600080fd5b86516001600160401b03808211156200040557600080fd5b818901915089601f8301126200041a57600080fd5b8151818111156200042f576200042f62000388565b604051601f8201601f19908116603f011681019083821181831017156200045a576200045a62000388565b81604052828152602093508c848487010111156200047757600080fd5b600091505b828210156200049b57848201840151818301850152908301906200047c565b82821115620004ad5760008484830101525b9950620004bf9150508982016200039e565b96505050604087015193506060870151925060808701519150620004e660a08801620003bb565b90509295509295509295565b600181811c908216806200050757607f821691505b602082108114156200052957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051612da062000591600039600081816107580152611618015260006118bf0152600061190e015260006118e9015260006118420152600061186c015260006118960152612da06000f3fe6080604052600436106102085760003560e01c806370b0f66011610118578063d07f91e9116100a0578063eb9019d41161006f578063eb9019d4146106b8578063ece40cc1146106d8578063f23a6e61146106f8578063f8ce560a14610724578063fc0c546a1461074657600080fd5b8063d07f91e9146105fe578063dd4e2ba51461061e578063deaaa7cc14610664578063ea0217cf1461069857600080fd5b8063b58131b0116100e7578063b58131b01461056a578063bc197c811461057f578063c01f9e37146105ab578063c28bc2fa146105cb578063c59057e4146105de57600080fd5b806370b0f660146104ea5780637b3c71d31461050a5780637d5e81e21461052a5780639a802a6d1461054a57600080fd5b806332b8113e1161019b578063438596321161016a57806343859632146103e1578063544ffc9c1461042b57806354fd4d501461048057806356781388146104aa5780635f398a14146104ca57600080fd5b806332b8113e146103575780633932abb11461037f5780633bccf4fd146103945780633e4f49e6146103b457600080fd5b8063150b7a02116101d7578063150b7a02146102ac5780632656227d146102f05780632d63f693146103035780632fe3e2611461032357600080fd5b806301ffc9a71461021657806302a251a31461024b578063034201811461026a57806306fdde031461028a57600080fd5b3661021157005b005b600080fd5b34801561022257600080fd5b50610236610231366004611fe5565b610792565b60405190151581526020015b60405180910390f35b34801561025757600080fd5b506005545b604051908152602001610242565b34801561027657600080fd5b5061025c61028536600461212a565b6107ff565b34801561029657600080fd5b5061029f6108f7565b604051610242919061222c565b3480156102b857600080fd5b506102d76102c7366004612256565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610242565b61025c6102fe366004612421565b610989565b34801561030f57600080fd5b5061025c61031e3660046124b0565b610ab5565b34801561032f57600080fd5b5061025c7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561036357600080fd5b506008546040516001600160401b039091168152602001610242565b34801561038b57600080fd5b5060045461025c565b3480156103a057600080fd5b5061025c6103af3660046124c9565b610aec565b3480156103c057600080fd5b506103d46103cf3660046124b0565b610b62565b604051610242919061252d565b3480156103ed57600080fd5b506102366103fc366004612555565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561043757600080fd5b506104656104463660046124b0565b6000908152600760205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610242565b34801561048c57600080fd5b506040805180820190915260018152603160f81b602082015261029f565b3480156104b657600080fd5b5061025c6104c5366004612581565b610c6e565b3480156104d657600080fd5b5061025c6104e53660046125a4565b610c97565b3480156104f657600080fd5b5061020f6105053660046124b0565b610ce1565b34801561051657600080fd5b5061025c610525366004612627565b610d28565b34801561053657600080fd5b5061025c610545366004612680565b610d7a565b34801561055657600080fd5b5061025c610565366004612734565b61101e565b34801561057657600080fd5b5061025c611035565b34801561058b57600080fd5b506102d761059a36600461278a565b63bc197c8160e01b95945050505050565b3480156105b757600080fd5b5061025c6105c63660046124b0565b611045565b61020f6105d9366004612819565b611050565b3480156105ea57600080fd5b5061025c6105f9366004612421565b61111c565b34801561060a57600080fd5b5061020f61061936600461285a565b611156565b34801561062a57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261029f565b34801561067057600080fd5b5061025c7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156106a457600080fd5b5061020f6106b33660046124b0565b61119a565b3480156106c457600080fd5b5061025c6106d3366004612883565b6111de565b3480156106e457600080fd5b5061020f6106f33660046124b0565b6111ff565b34801561070457600080fd5b506102d76107133660046128ad565b63f23a6e6160e01b95945050505050565b34801561073057600080fd5b5061025c61073f3660046124b0565b50600a5490565b34801561075257600080fd5b5061077a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610242565b60006001600160e01b0319821663bf26d89760e01b14806107c357506001600160e01b031982166379dd796f60e01b145b806107de57506001600160e01b03198216630271189760e51b145b806107f957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806108a361089b7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c60405161083b929190612911565b60405180910390208b80519060200120604051602001610880959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611243565b868686611291565b90506108e98a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506112af915050565b9a9950505050505050505050565b60606000805461090690612921565b80601f016020809104026020016040519081016040528092919081815260200182805461093290612921565b801561097f5780601f106109545761010080835404028352916020019161097f565b820191906000526020600020905b81548152906001019060200180831161096257829003601f168201915b5050505050905090565b6000806109988686868661111c565b905060006109a582610b62565b905060048160078111156109bb576109bb612517565b14806109d8575060058160078111156109d6576109d6612517565b145b610a335760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b60648201526084015b60405180910390fd5b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610a9182888888886112be565b610a9e828888888861134c565b610aab82888888886112be565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610b3a9061089b90608001610880565b9050610b5787828860405180602001604052806000815250611442565b979650505050505050565b6000818152600160205260408120600281015460ff1615610b865750600792915050565b6002810154610100900460ff1615610ba15750600292915050565b6000610bac84610ab5565b905080610bfb5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a2a565b438110610c0c575060009392505050565b6000610c1785611045565b9050438110610c2b57506001949350505050565b610c348561146e565b8015610c53575060008581526007602052604090208054600190910154115b15610c6357506004949350505050565b506003949350505050565b600080339050610c8f84828560405180602001604052806000815250611442565b949350505050565b600080339050610b5787828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506112af915050565b333014610d005760405162461bcd60e51b8152600401610a2a9061295c565b610d1c565b80610d1060026114a5565b14610d1a57610d05565b505b610d2581611524565b50565b600080339050610d7086828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144292505050565b9695505050505050565b6000610d84611035565b610d93336106d36001436129a9565b1015610dfb5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a2a565b6000610e10868686868051906020012061111c565b90508451865114610e335760405162461bcd60e51b8152600401610a2a906129c0565b8351865114610e545760405162461bcd60e51b8152600401610a2a906129c0565b6000865111610ea55760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a2a565b600081815260016020908152604091829020825191820190925281546001600160401b03169081905215610f255760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a2a565b6000610f38610f3360045490565b611565565b610f4143611565565b610f4b9190612a01565b90506000610f5b610f3360055490565b610f659083612a01565b9050610f7183836115d1565b610f7e60018401826115d1565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115610fbc57610fbc61206d565b604051908082528060200260200182016040528015610fef57816020015b6060815260200190600190039081610fda5790505b508c88888e60405161100999989796959493929190612af5565b60405180910390a15091979650505050505050565b600061102b8484846115ef565b90505b9392505050565b600061104060065490565b905090565b60006107f982611694565b33301461106f5760405162461bcd60e51b8152600401610a2a9061295c565b61108b565b8061107f60026114a5565b1461108957611074565b505b600080856001600160a01b03168585856040516110a9929190612911565b60006040518083038185875af1925050503d80600081146110e6576040519150601f19603f3d011682016040523d82523d6000602084013e6110eb565b606091505b50915091506111138282604051806060016040528060288152602001612d1c602891396116d0565b50505050505050565b6000848484846040516020016111359493929190612be4565b60408051601f19818403018152919052805160209091012095945050505050565b3330146111755760405162461bcd60e51b8152600401610a2a9061295c565b611191565b8061118560026114a5565b1461118f5761117a565b505b610d25816116e9565b3330146111b95760405162461bcd60e51b8152600401610a2a9061295c565b6111d5565b806111c960026114a5565b146111d3576111be565b505b610d2581611753565b600061102e83836111fa60408051602081019091526000815290565b6115ef565b33301461121e5760405162461bcd60e51b8152600401610a2a9061295c565b61123a565b8061122e60026114a5565b1461123857611223565b505b610d25816117f4565b60006107f9611250611835565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006112a28787878761195c565b91509150610aab81611a20565b6000610d708686868686611b6e565b611345565b845181101561134357306001600160a01b03168582815181106112e8576112e8612c2f565b60200260200101516001600160a01b031614156113335761133383828151811061131457611314612c2f565b6020026020010151805190602001206002611c5990919063ffffffff16565b61133c81612c45565b90506112c3565b505b5050505050565b6000604051806060016040528060278152602001612d4460279139905060005b85518110156111135760008087838151811061138a5761138a612c2f565b60200260200101516001600160a01b03168784815181106113ad576113ad612c2f565b60200260200101518785815181106113c7576113c7612c2f565b60200260200101516040516113dc9190612c60565b60006040518083038185875af1925050503d8060008114611419576040519150601f19603f3d011682016040523d82523d6000602084013e61141e565b606091505b509150915061142e8282866116d0565b5050508061143b90612c45565b905061136c565b60006114658585858561146060408051602081019091526000815290565b6112af565b95945050505050565b6000818152600760205260408120600281015460018201546114909190612c7c565b61149c61073f85610ab5565b11159392505050565b60006114c08254600f81810b600160801b909204900b131590565b156114de57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b60006001600160401b038211156115cd5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a2a565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a89060440160206040518083038186803b15801561165c57600080fd5b505afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190612c94565b60006107f96116a283611c95565b600084815260096020908152604091829020825191820190925290546001600160401b031690819052611cc4565b606083156116df57508161102e565b61102e8383611cda565b600854604080516001600160401b03928316815291831660208301527f7ca4ac117ed3cdce75c1161d8207c440389b1a15d69d096831664657c07dafc2910160405180910390a16008805467ffffffffffffffff19166001600160401b0392909216919091179055565b600081116117b35760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a2a565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561188e57507f000000000000000000000000000000000000000000000000000000000000000046145b156118b857507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156119935750600090506003611a17565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156119e7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611a1057600060019250925050611a17565b9150600090505b94509492505050565b6000816004811115611a3457611a34612517565b1415611a3d5750565b6001816004811115611a5157611a51612517565b1415611a9f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a2a565b6002816004811115611ab357611ab3612517565b1415611b015760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a2a565b6003816004811115611b1557611b15612517565b1415610d255760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a2a565b600080611b7e8787878787611d04565b600088815260096020908152604091829020825191820190925281546001600160401b03169081905291925090158015611bbc5750611bbc8861146e565b15611c4e576000611bd56008546001600160401b031690565b611bde43611565565b611be89190612a01565b9050611bf389611045565b816001600160401b03161115611c42576040516001600160401b038216815289907f541f725fb9f7c98a30cc9c0ff32fbb14358cd7159c847a3aa20a2bdc442ba5119060200160405180910390a25b611c4c82826115d1565b505b509695505050505050565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610add565b6000818311611cd3578161102e565b5090919050565b815115611cea5781518083602001fd5b8060405162461bcd60e51b8152600401610a2a919061222c565b6000858152600160208190526040822090611d1e88610b62565b6007811115611d2f57611d2f612517565b14611d885760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a2a565b604080516020810190915281546001600160401b031690819052600090611db1908890866115ef565b9050611dc08888888488611e66565b8351611e1257866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611e059493929190612cad565b60405180910390a2610b57565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611e53959493929190612cd5565b60405180910390a2979650505050505050565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff1615611eee5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a2a565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415611f3f5782816000016000828254611f349190612c7c565b909155506113439050565b60ff841660011415611f5f5782816001016000828254611f349190612c7c565b60ff841660021415611f7f5782816002016000828254611f349190612c7c565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a2a565b600060208284031215611ff757600080fd5b81356001600160e01b03198116811461102e57600080fd5b803560ff8116811461202057600080fd5b919050565b60008083601f84011261203757600080fd5b5081356001600160401b0381111561204e57600080fd5b60208301915083602082850101111561206657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156120ab576120ab61206d565b604052919050565b60006001600160401b038311156120cc576120cc61206d565b6120df601f8401601f1916602001612083565b90508281528383830111156120f357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261211b57600080fd5b61102e838335602085016120b3565b60008060008060008060008060e0898b03121561214657600080fd5b8835975061215660208a0161200f565b965060408901356001600160401b038082111561217257600080fd5b61217e8c838d01612025565b909850965060608b013591508082111561219757600080fd5b506121a48b828c0161210a565b9450506121b360808a0161200f565b925060a0890135915060c089013590509295985092959890939650565b60005b838110156121eb5781810151838201526020016121d3565b838111156121fa576000848401525b50505050565b600081518084526122188160208601602086016121d0565b601f01601f19169290920160200192915050565b60208152600061102e6020830184612200565b80356001600160a01b038116811461202057600080fd5b6000806000806080858703121561226c57600080fd5b6122758561223f565b93506122836020860161223f565b92506040850135915060608501356001600160401b038111156122a557600080fd5b6122b18782880161210a565b91505092959194509250565b60006001600160401b038211156122d6576122d661206d565b5060051b60200190565b600082601f8301126122f157600080fd5b81356020612306612301836122bd565b612083565b82815260059290921b8401810191818101908684111561232557600080fd5b8286015b84811015611c4e5761233a8161223f565b8352918301918301612329565b600082601f83011261235857600080fd5b81356020612368612301836122bd565b82815260059290921b8401810191818101908684111561238757600080fd5b8286015b84811015611c4e578035835291830191830161238b565b600082601f8301126123b357600080fd5b813560206123c3612301836122bd565b82815260059290921b840181019181810190868411156123e257600080fd5b8286015b84811015611c4e5780356001600160401b038111156124055760008081fd5b6124138986838b010161210a565b8452509183019183016123e6565b6000806000806080858703121561243757600080fd5b84356001600160401b038082111561244e57600080fd5b61245a888389016122e0565b9550602087013591508082111561247057600080fd5b61247c88838901612347565b9450604087013591508082111561249257600080fd5b5061249f878288016123a2565b949793965093946060013593505050565b6000602082840312156124c257600080fd5b5035919050565b600080600080600060a086880312156124e157600080fd5b853594506124f16020870161200f565b93506124ff6040870161200f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061254f57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561256857600080fd5b823591506125786020840161223f565b90509250929050565b6000806040838503121561259457600080fd5b823591506125786020840161200f565b6000806000806000608086880312156125bc57600080fd5b853594506125cc6020870161200f565b935060408601356001600160401b03808211156125e857600080fd5b6125f489838a01612025565b9095509350606088013591508082111561260d57600080fd5b5061261a8882890161210a565b9150509295509295909350565b6000806000806060858703121561263d57600080fd5b8435935061264d6020860161200f565b925060408501356001600160401b0381111561266857600080fd5b61267487828801612025565b95989497509550505050565b6000806000806080858703121561269657600080fd5b84356001600160401b03808211156126ad57600080fd5b6126b9888389016122e0565b955060208701359150808211156126cf57600080fd5b6126db88838901612347565b945060408701359150808211156126f157600080fd5b6126fd888389016123a2565b9350606087013591508082111561271357600080fd5b508501601f8101871361272557600080fd5b6122b1878235602084016120b3565b60008060006060848603121561274957600080fd5b6127528461223f565b92506020840135915060408401356001600160401b0381111561277457600080fd5b6127808682870161210a565b9150509250925092565b600080600080600060a086880312156127a257600080fd5b6127ab8661223f565b94506127b96020870161223f565b935060408601356001600160401b03808211156127d557600080fd5b6127e189838a01612347565b945060608801359150808211156127f757600080fd5b61280389838a01612347565b9350608088013591508082111561260d57600080fd5b6000806000806060858703121561282f57600080fd5b6128388561223f565b93506020850135925060408501356001600160401b0381111561266857600080fd5b60006020828403121561286c57600080fd5b81356001600160401b038116811461102e57600080fd5b6000806040838503121561289657600080fd5b61289f8361223f565b946020939093013593505050565b600080600080600060a086880312156128c557600080fd5b6128ce8661223f565b94506128dc6020870161223f565b9350604086013592506060860135915060808601356001600160401b0381111561290557600080fd5b61261a8882890161210a565b8183823760009101908152919050565b600181811c9082168061293557607f821691505b6020821081141561295657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156129bb576129bb612993565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612a2357612a23612993565b01949350505050565b600081518084526020808501945080840160005b83811015612a655781516001600160a01b031687529582019590820190600101612a40565b509495945050505050565b600081518084526020808501945080840160005b83811015612a6557815187529582019590820190600101612a84565b600081518084526020808501808196508360051b8101915082860160005b85811015612ae8578284038952612ad6848351612200565b98850198935090840190600101612abe565b5091979650505050505050565b60006101208b8352602060018060a01b038c1681850152816040850152612b1e8285018c612a2c565b91508382036060850152612b32828b612a70565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612b8357601f19878403018552612b71838351612200565b94860194925090850190600101612b55565b505086810360a0880152612b97818c612aa0565b945050505050612bb260c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612bd48185612200565b9c9b505050505050505050505050565b608081526000612bf76080830187612a2c565b8281036020840152612c098187612a70565b90508281036040840152612c1d8186612aa0565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612c5957612c59612993565b5060010190565b60008251612c728184602087016121d0565b9190910192915050565b60008219821115612c8f57612c8f612993565b500190565b600060208284031215612ca657600080fd5b5051919050565b84815260ff84166020820152826040820152608060608201526000610d706080830184612200565b85815260ff8516602082015283604082015260a060608201526000612cfd60a0830185612200565b8281036080840152612d0f8185612200565b9897505050505050505056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765a2646970667358221220edd6922e38b9a210c14724c7e2cca989a4505336e295582efa75f128c9b8f06664736f6c63430008090033";

    public static final String FUNC_BALLOT_TYPEHASH = "BALLOT_TYPEHASH";

    public static final String FUNC_COUNTING_MODE = "COUNTING_MODE";

    public static final String FUNC_EXTENDED_BALLOT_TYPEHASH = "EXTENDED_BALLOT_TYPEHASH";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_CASTVOTEBYSIG = "castVoteBySig";

    public static final String FUNC_CASTVOTEWITHREASON = "castVoteWithReason";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMS = "castVoteWithReasonAndParams";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG = "castVoteWithReasonAndParamsBySig";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_GETVOTES = "getVotes";

    public static final String FUNC_GETVOTESWITHPARAMS = "getVotesWithParams";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_HASHPROPOSAL = "hashProposal";

    public static final String FUNC_LATEQUORUMVOTEEXTENSION = "lateQuorumVoteExtension";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";

    public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PROPOSALDEADLINE = "proposalDeadline";

    public static final String FUNC_PROPOSALSNAPSHOT = "proposalSnapshot";

    public static final String FUNC_PROPOSALTHRESHOLD = "proposalThreshold";

    public static final String FUNC_PROPOSALVOTES = "proposalVotes";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_QUORUM = "quorum";

    public static final String FUNC_RELAY = "relay";

    public static final String FUNC_SETLATEQUORUMVOTEEXTENSION = "setLateQuorumVoteExtension";

    public static final String FUNC_SETPROPOSALTHRESHOLD = "setProposalThreshold";

    public static final String FUNC_SETVOTINGDELAY = "setVotingDelay";

    public static final String FUNC_SETVOTINGPERIOD = "setVotingPeriod";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTINGDELAY = "votingDelay";

    public static final String FUNC_VOTINGPERIOD = "votingPeriod";

    public static final Event LATEQUORUMVOTEEXTENSIONSET_EVENT = new Event("LateQuorumVoteExtensionSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event PROPOSALCANCELED_EVENT = new Event("ProposalCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PROPOSALEXECUTED_EVENT = new Event("ProposalExecuted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALEXTENDED_EVENT = new Event("ProposalExtended", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event PROPOSALTHRESHOLDSET_EVENT = new Event("ProposalThresholdSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTECASTWITHPARAMS_EVENT = new Event("VoteCastWithParams", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTINGDELAYSET_EVENT = new Event("VotingDelaySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTINGPERIODSET_EVENT = new Event("VotingPeriodSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected GovernorPreventLateQuorumMock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GovernorPreventLateQuorumMock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GovernorPreventLateQuorumMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GovernorPreventLateQuorumMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<LateQuorumVoteExtensionSetEventResponse> getLateQuorumVoteExtensionSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LATEQUORUMVOTEEXTENSIONSET_EVENT, transactionReceipt);
        ArrayList<LateQuorumVoteExtensionSetEventResponse> responses = new ArrayList<LateQuorumVoteExtensionSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LateQuorumVoteExtensionSetEventResponse typedResponse = new LateQuorumVoteExtensionSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVoteExtension = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVoteExtension = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LateQuorumVoteExtensionSetEventResponse> lateQuorumVoteExtensionSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LateQuorumVoteExtensionSetEventResponse>() {
            @Override
            public LateQuorumVoteExtensionSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LATEQUORUMVOTEEXTENSIONSET_EVENT, log);
                LateQuorumVoteExtensionSetEventResponse typedResponse = new LateQuorumVoteExtensionSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVoteExtension = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVoteExtension = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LateQuorumVoteExtensionSetEventResponse> lateQuorumVoteExtensionSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LATEQUORUMVOTEEXTENSIONSET_EVENT));
        return lateQuorumVoteExtensionSetEventFlowable(filter);
    }

    public static List<ProposalCanceledEventResponse> getProposalCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCANCELED_EVENT, transactionReceipt);
        ArrayList<ProposalCanceledEventResponse> responses = new ArrayList<ProposalCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCanceledEventResponse>() {
            @Override
            public ProposalCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCANCELED_EVENT, log);
                ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCANCELED_EVENT));
        return proposalCanceledEventFlowable(filter);
    }

    public static List<ProposalCreatedEventResponse> getProposalCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
            typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
            typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
            typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCreatedEventResponse>() {
            @Override
            public ProposalCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
                ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
                typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
                typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
                typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public static List<ProposalExecutedEventResponse> getProposalExecutedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALEXECUTED_EVENT, transactionReceipt);
        ArrayList<ProposalExecutedEventResponse> responses = new ArrayList<ProposalExecutedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalExecutedEventResponse>() {
            @Override
            public ProposalExecutedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALEXECUTED_EVENT, log);
                ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALEXECUTED_EVENT));
        return proposalExecutedEventFlowable(filter);
    }

    public static List<ProposalExtendedEventResponse> getProposalExtendedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALEXTENDED_EVENT, transactionReceipt);
        ArrayList<ProposalExtendedEventResponse> responses = new ArrayList<ProposalExtendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalExtendedEventResponse typedResponse = new ProposalExtendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.extendedDeadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalExtendedEventResponse> proposalExtendedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalExtendedEventResponse>() {
            @Override
            public ProposalExtendedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALEXTENDED_EVENT, log);
                ProposalExtendedEventResponse typedResponse = new ProposalExtendedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.extendedDeadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalExtendedEventResponse> proposalExtendedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALEXTENDED_EVENT));
        return proposalExtendedEventFlowable(filter);
    }

    public static List<ProposalThresholdSetEventResponse> getProposalThresholdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, transactionReceipt);
        ArrayList<ProposalThresholdSetEventResponse> responses = new ArrayList<ProposalThresholdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalThresholdSetEventResponse>() {
            @Override
            public ProposalThresholdSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, log);
                ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALTHRESHOLDSET_EVENT));
        return proposalThresholdSetEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastEventResponse>() {
            @Override
            public VoteCastEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECAST_EVENT, log);
                VoteCastEventResponse typedResponse = new VoteCastEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public static List<VoteCastWithParamsEventResponse> getVoteCastWithParamsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, transactionReceipt);
        ArrayList<VoteCastWithParamsEventResponse> responses = new ArrayList<VoteCastWithParamsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastWithParamsEventResponse>() {
            @Override
            public VoteCastWithParamsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, log);
                VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECASTWITHPARAMS_EVENT));
        return voteCastWithParamsEventFlowable(filter);
    }

    public static List<VotingDelaySetEventResponse> getVotingDelaySetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGDELAYSET_EVENT, transactionReceipt);
        ArrayList<VotingDelaySetEventResponse> responses = new ArrayList<VotingDelaySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingDelaySetEventResponse>() {
            @Override
            public VotingDelaySetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGDELAYSET_EVENT, log);
                VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGDELAYSET_EVENT));
        return votingDelaySetEventFlowable(filter);
    }

    public static List<VotingPeriodSetEventResponse> getVotingPeriodSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGPERIODSET_EVENT, transactionReceipt);
        ArrayList<VotingPeriodSetEventResponse> responses = new ArrayList<VotingPeriodSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingPeriodSetEventResponse>() {
            @Override
            public VotingPeriodSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGPERIODSET_EVENT, log);
                VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGPERIODSET_EVENT));
        return votingPeriodSetEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> COUNTING_MODE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTING_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> EXTENDED_BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTENDED_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger proposalId, BigInteger support) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteBySig(BigInteger proposalId, BigInteger support, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReason(BigInteger proposalId, BigInteger support, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASON, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParams(BigInteger proposalId, BigInteger support, String reason, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParamsBySig(BigInteger proposalId, BigInteger support, String reason, byte[] params, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> getVotes(String account, BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getVotesWithParams(String account, BigInteger blockNumber, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTESWITHPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(BigInteger proposalId, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> hashProposal(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> lateQuorumVoteExtension() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATEQUORUMVOTEEXTENSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155BatchReceived(String param0, String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155BATCHRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155Received(String param0, String param1, BigInteger param2, BigInteger param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.generated.Uint256(param3), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> proposalDeadline(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALDEADLINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalSnapshot(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> proposalVotes(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> propose(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, String description) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> quorum(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> relay(String target, BigInteger value, byte[] data, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, target), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setLateQuorumVoteExtension(BigInteger newVoteExtension) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLATEQUORUMVOTEEXTENSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(newVoteExtension)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProposalThreshold(BigInteger newProposalThreshold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROPOSALTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newProposalThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingDelay(BigInteger newVotingDelay) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGDELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingPeriod(BigInteger newVotingPeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingPeriod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> state(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> votingDelay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> votingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GovernorPreventLateQuorumMock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorPreventLateQuorumMock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GovernorPreventLateQuorumMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorPreventLateQuorumMock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GovernorPreventLateQuorumMock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GovernorPreventLateQuorumMock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GovernorPreventLateQuorumMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GovernorPreventLateQuorumMock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GovernorPreventLateQuorumMock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorum_, BigInteger voteExtension_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorum_), 
                new org.web3j.abi.datatypes.generated.Uint64(voteExtension_)));
        return deployRemoteCall(GovernorPreventLateQuorumMock.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<GovernorPreventLateQuorumMock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorum_, BigInteger voteExtension_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorum_), 
                new org.web3j.abi.datatypes.generated.Uint64(voteExtension_)));
        return deployRemoteCall(GovernorPreventLateQuorumMock.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorPreventLateQuorumMock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorum_, BigInteger voteExtension_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorum_), 
                new org.web3j.abi.datatypes.generated.Uint64(voteExtension_)));
        return deployRemoteCall(GovernorPreventLateQuorumMock.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorPreventLateQuorumMock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, BigInteger quorum_, BigInteger voteExtension_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorum_), 
                new org.web3j.abi.datatypes.generated.Uint64(voteExtension_)));
        return deployRemoteCall(GovernorPreventLateQuorumMock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class LateQuorumVoteExtensionSetEventResponse extends BaseEventResponse {
        public BigInteger oldVoteExtension;

        public BigInteger newVoteExtension;
    }

    public static class ProposalCanceledEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public String proposer;

        public List<String> targets;

        public List<BigInteger> values;

        public List<String> signatures;

        public List<byte[]> calldatas;

        public BigInteger startBlock;

        public BigInteger endBlock;

        public String description;
    }

    public static class ProposalExecutedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalExtendedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public BigInteger extendedDeadline;
    }

    public static class ProposalThresholdSetEventResponse extends BaseEventResponse {
        public BigInteger oldProposalThreshold;

        public BigInteger newProposalThreshold;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;
    }

    public static class VoteCastWithParamsEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;

        public byte[] params;
    }

    public static class VotingDelaySetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingDelay;

        public BigInteger newVotingDelay;
    }

    public static class VotingPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingPeriod;

        public BigInteger newVotingPeriod;
    }
}
