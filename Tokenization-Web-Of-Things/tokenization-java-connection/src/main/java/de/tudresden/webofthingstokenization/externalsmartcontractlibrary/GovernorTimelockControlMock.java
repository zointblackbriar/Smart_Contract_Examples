package de.tudresden.webofthingstokenization.externalsmartcontractlibrary;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class GovernorTimelockControlMock extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_BALLOT_TYPEHASH = "BALLOT_TYPEHASH";

    public static final String FUNC_COUNTING_MODE = "COUNTING_MODE";

    public static final String FUNC_EXTENDED_BALLOT_TYPEHASH = "EXTENDED_BALLOT_TYPEHASH";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_CASTVOTEBYSIG = "castVoteBySig";

    public static final String FUNC_CASTVOTEWITHREASON = "castVoteWithReason";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMS = "castVoteWithReasonAndParams";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG = "castVoteWithReasonAndParamsBySig";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_GETVOTES = "getVotes";

    public static final String FUNC_GETVOTESWITHPARAMS = "getVotesWithParams";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_HASHPROPOSAL = "hashProposal";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONGOVERNANCEFUNCTION = "nonGovernanceFunction";

    public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";

    public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PROPOSALDEADLINE = "proposalDeadline";

    public static final String FUNC_PROPOSALETA = "proposalEta";

    public static final String FUNC_PROPOSALSNAPSHOT = "proposalSnapshot";

    public static final String FUNC_PROPOSALTHRESHOLD = "proposalThreshold";

    public static final String FUNC_PROPOSALVOTES = "proposalVotes";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_QUEUE = "queue";

    public static final String FUNC_QUORUM = "quorum";

    public static final String FUNC_QUORUMDENOMINATOR = "quorumDenominator";

    public static final String FUNC_quorumNumerator = "quorumNumerator";

    public static final String FUNC_RELAY = "relay";

    public static final String FUNC_SETPROPOSALTHRESHOLD = "setProposalThreshold";

    public static final String FUNC_SETVOTINGDELAY = "setVotingDelay";

    public static final String FUNC_SETVOTINGPERIOD = "setVotingPeriod";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TIMELOCK = "timelock";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_UPDATEQUORUMNUMERATOR = "updateQuorumNumerator";

    public static final String FUNC_UPDATETIMELOCK = "updateTimelock";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTINGDELAY = "votingDelay";

    public static final String FUNC_VOTINGPERIOD = "votingPeriod";

    public static final Event PROPOSALCANCELED_EVENT = new Event("ProposalCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PROPOSALEXECUTED_EVENT = new Event("ProposalExecuted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALQUEUED_EVENT = new Event("ProposalQueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALTHRESHOLDSET_EVENT = new Event("ProposalThresholdSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event QUORUMNUMERATORUPDATED_EVENT = new Event("QuorumNumeratorUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TIMELOCKCHANGE_EVENT = new Event("TimelockChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTECASTWITHPARAMS_EVENT = new Event("VoteCastWithParams", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTINGDELAYSET_EVENT = new Event("VotingDelaySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTINGPERIODSET_EVENT = new Event("VotingPeriodSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected GovernorTimelockControlMock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GovernorTimelockControlMock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GovernorTimelockControlMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GovernorTimelockControlMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ProposalCanceledEventResponse> getProposalCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCANCELED_EVENT, transactionReceipt);
        ArrayList<ProposalCanceledEventResponse> responses = new ArrayList<ProposalCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCanceledEventResponse>() {
            @Override
            public ProposalCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCANCELED_EVENT, log);
                ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCANCELED_EVENT));
        return proposalCanceledEventFlowable(filter);
    }

    public static List<ProposalCreatedEventResponse> getProposalCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
            typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
            typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
            typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCreatedEventResponse>() {
            @Override
            public ProposalCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
                ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
                typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
                typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
                typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public static List<ProposalExecutedEventResponse> getProposalExecutedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALEXECUTED_EVENT, transactionReceipt);
        ArrayList<ProposalExecutedEventResponse> responses = new ArrayList<ProposalExecutedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalExecutedEventResponse>() {
            @Override
            public ProposalExecutedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALEXECUTED_EVENT, log);
                ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALEXECUTED_EVENT));
        return proposalExecutedEventFlowable(filter);
    }

    public static List<ProposalQueuedEventResponse> getProposalQueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALQUEUED_EVENT, transactionReceipt);
        ArrayList<ProposalQueuedEventResponse> responses = new ArrayList<ProposalQueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalQueuedEventResponse typedResponse = new ProposalQueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eta = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalQueuedEventResponse> proposalQueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalQueuedEventResponse>() {
            @Override
            public ProposalQueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALQUEUED_EVENT, log);
                ProposalQueuedEventResponse typedResponse = new ProposalQueuedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eta = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalQueuedEventResponse> proposalQueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALQUEUED_EVENT));
        return proposalQueuedEventFlowable(filter);
    }

    public static List<ProposalThresholdSetEventResponse> getProposalThresholdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, transactionReceipt);
        ArrayList<ProposalThresholdSetEventResponse> responses = new ArrayList<ProposalThresholdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalThresholdSetEventResponse>() {
            @Override
            public ProposalThresholdSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, log);
                ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALTHRESHOLDSET_EVENT));
        return proposalThresholdSetEventFlowable(filter);
    }

    public static List<QuorumNumeratorUpdatedEventResponse> getQuorumNumeratorUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, transactionReceipt);
        ArrayList<QuorumNumeratorUpdatedEventResponse> responses = new ArrayList<QuorumNumeratorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, QuorumNumeratorUpdatedEventResponse>() {
            @Override
            public QuorumNumeratorUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, log);
                QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUORUMNUMERATORUPDATED_EVENT));
        return quorumNumeratorUpdatedEventFlowable(filter);
    }

    public static List<TimelockChangeEventResponse> getTimelockChangeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TIMELOCKCHANGE_EVENT, transactionReceipt);
        ArrayList<TimelockChangeEventResponse> responses = new ArrayList<TimelockChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TimelockChangeEventResponse typedResponse = new TimelockChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldTimelock = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newTimelock = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TimelockChangeEventResponse> timelockChangeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TimelockChangeEventResponse>() {
            @Override
            public TimelockChangeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TIMELOCKCHANGE_EVENT, log);
                TimelockChangeEventResponse typedResponse = new TimelockChangeEventResponse();
                typedResponse.log = log;
                typedResponse.oldTimelock = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newTimelock = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TimelockChangeEventResponse> timelockChangeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TIMELOCKCHANGE_EVENT));
        return timelockChangeEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastEventResponse>() {
            @Override
            public VoteCastEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECAST_EVENT, log);
                VoteCastEventResponse typedResponse = new VoteCastEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public static List<VoteCastWithParamsEventResponse> getVoteCastWithParamsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, transactionReceipt);
        ArrayList<VoteCastWithParamsEventResponse> responses = new ArrayList<VoteCastWithParamsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastWithParamsEventResponse>() {
            @Override
            public VoteCastWithParamsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, log);
                VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECASTWITHPARAMS_EVENT));
        return voteCastWithParamsEventFlowable(filter);
    }

    public static List<VotingDelaySetEventResponse> getVotingDelaySetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGDELAYSET_EVENT, transactionReceipt);
        ArrayList<VotingDelaySetEventResponse> responses = new ArrayList<VotingDelaySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingDelaySetEventResponse>() {
            @Override
            public VotingDelaySetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGDELAYSET_EVENT, log);
                VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGDELAYSET_EVENT));
        return votingDelaySetEventFlowable(filter);
    }

    public static List<VotingPeriodSetEventResponse> getVotingPeriodSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGPERIODSET_EVENT, transactionReceipt);
        ArrayList<VotingPeriodSetEventResponse> responses = new ArrayList<VotingPeriodSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingPeriodSetEventResponse>() {
            @Override
            public VotingPeriodSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGPERIODSET_EVENT, log);
                VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGPERIODSET_EVENT));
        return votingPeriodSetEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> COUNTING_MODE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTING_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> EXTENDED_BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTENDED_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> cancel(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger proposalId, BigInteger support) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteBySig(BigInteger proposalId, BigInteger support, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReason(BigInteger proposalId, BigInteger support, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASON, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParams(BigInteger proposalId, BigInteger support, String reason, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParamsBySig(BigInteger proposalId, BigInteger support, String reason, byte[] params, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> getVotes(String account, BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getVotesWithParams(String account, BigInteger blockNumber, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTESWITHPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(BigInteger proposalId, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> hashProposal(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> nonGovernanceFunction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NONGOVERNANCEFUNCTION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155BatchReceived(String param0, String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155BATCHRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155Received(String param0, String param1, BigInteger param2, BigInteger param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.generated.Uint256(param3), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> proposalDeadline(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALDEADLINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalEta(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALETA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalSnapshot(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> proposalVotes(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> propose(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, String description) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> queue(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_QUEUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> quorum(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumDenominator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUMDENOMINATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> relay(String target, BigInteger value, byte[] data, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, target), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setProposalThreshold(BigInteger newProposalThreshold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROPOSALTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newProposalThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingDelay(BigInteger newVotingDelay) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGDELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingPeriod(BigInteger newVotingPeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingPeriod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> state(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> timelock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TIMELOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateQuorumNumerator(BigInteger newQuorumNumerator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEQUORUMNUMERATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newQuorumNumerator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTimelock(String newTimelock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETIMELOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newTimelock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> votingDelay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> votingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GovernorTimelockControlMock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorTimelockControlMock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GovernorTimelockControlMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorTimelockControlMock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GovernorTimelockControlMock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GovernorTimelockControlMock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GovernorTimelockControlMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GovernorTimelockControlMock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GovernorTimelockControlMock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockControlMock.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<GovernorTimelockControlMock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockControlMock.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorTimelockControlMock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockControlMock.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorTimelockControlMock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockControlMock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ProposalCanceledEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public String proposer;

        public List<String> targets;

        public List<BigInteger> values;

        public List<String> signatures;

        public List<byte[]> calldatas;

        public BigInteger startBlock;

        public BigInteger endBlock;

        public String description;
    }

    public static class ProposalExecutedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalQueuedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public BigInteger eta;
    }

    public static class ProposalThresholdSetEventResponse extends BaseEventResponse {
        public BigInteger oldProposalThreshold;

        public BigInteger newProposalThreshold;
    }

    public static class QuorumNumeratorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger oldQuorumNumerator;

        public BigInteger newQuorumNumerator;
    }

    public static class TimelockChangeEventResponse extends BaseEventResponse {
        public String oldTimelock;

        public String newTimelock;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;
    }

    public static class VoteCastWithParamsEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;

        public byte[] params;
    }

    public static class VotingDelaySetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingDelay;

        public BigInteger newVotingDelay;
    }

    public static class VotingPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingPeriod;

        public BigInteger newVotingPeriod;
    }
}
