package de.tudresden.webofthingstokenization.externalsmartcontractlibrary;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class GovernorTimelockCompoundMock extends Contract {
    public static final String BINARY = "6101606040523480156200001257600080fd5b5060405162004bbe38038062004bbe8339810160408190526200003591620008a3565b808583868660008b806200005d6040805180820190915260018152603160f81b602082015290565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620001039250600091506020840190620007d4565b506200011190508362000161565b6200011c82620001a2565b620001278162000249565b5050506200013b816200028a60201b60201c565b506001600160a01b0316610140526200015481620002f3565b5050505050505062000a25565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b60008111620002085760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b600754604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6064811115620003785760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401620001ff565b6000620003846200046b565b90508015801590620003965750600a54155b156200041157600a6000016040518060400160405280600063ffffffff168152602001620003cf84620004a360201b6200193a1760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b6200042c82600a6200051260201b620019a71790919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600a54600090156200049c576200048e600a6200056560201b620019dd1760201c565b6001600160e01b0316905090565b5060095490565b60006001600160e01b038211156200050e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620001ff565b5090565b6000806200054f846000016200053343620005b360201b62001a241760201c565b6200054986620004a360201b6200193a1760201c565b6200061a565b6001600160e01b03918216969116945092505050565b80546000908015620005a957620005918362000583600184620009c2565b600091825260209091200190565b5464010000000090046001600160e01b0316620005ac565b60005b9392505050565b600063ffffffff8211156200050e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620001ff565b825460009081908015620007765760006200063c8762000583600185620009c2565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620006c05760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401620001ff565b8563ffffffff16816000015163ffffffff161415620007155784620006ec8862000583600186620009c2565b80546001600160e01b03929092166401000000000263ffffffff90921691909117905562000765565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b602001519250839150620007cc9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050815b935093915050565b828054620007e290620009e8565b90600052602060002090601f01602090048101928262000806576000855562000851565b82601f106200082157805160ff191683800117855562000851565b8280016001018555821562000851579182015b828111156200085157825182559160200191906001019062000834565b506200050e9291505b808211156200050e57600081556001016200085a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200089e57600080fd5b919050565b60008060008060008060c08789031215620008bd57600080fd5b86516001600160401b0380821115620008d557600080fd5b818901915089601f830112620008ea57600080fd5b815181811115620008ff57620008ff62000870565b604051601f8201601f19908116603f011681019083821181831017156200092a576200092a62000870565b81604052828152602093508c848487010111156200094757600080fd5b600091505b828210156200096b57848201840151818301850152908301906200094c565b828211156200097d5760008484830101525b99506200098f91505089820162000886565b965050506040870151935060608701519250620009af6080880162000886565b915060a087015190509295509295509295565b600082821015620009e357634e487b7160e01b600052601160045260246000fd5b500390565b600181811c90821680620009fd57607f821691505b6020821081141562000a1f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161413062000a8e600039600081816108b0015281816121f301526123f60152600061272b0152600061277a01526000612755015260006126ae015260006126d80152600061270201526141306000f3fe6080604052600436106102605760003560e01c80637b3c71d311610144578063c28bc2fa116100b6578063ea0217cf1161007a578063ea0217cf146107f2578063eb9019d414610812578063ece40cc114610832578063f23a6e6114610852578063f8ce560a1461087e578063fc0c546a1461089e57600080fd5b8063c28bc2fa14610713578063c59057e414610726578063d33219b414610746578063dd4e2ba514610778578063deaaa7cc146107be57600080fd5b8063a890c91011610108578063a890c9101461065d578063ab58fb8e1461067d578063b58131b01461069d578063b9a61961146106b2578063bc197c81146106c7578063c01f9e37146106f357600080fd5b80637b3c71d3146105d45780637d5e81e2146105f457806397c3d334146106145780639a802a6d14610628578063a7713a701461064857600080fd5b80633932abb1116101dd578063544ffc9c116101a1578063544ffc9c146104d557806354fd4d501461052a57806356781388146105545780635f398a141461057457806360c4247f1461059457806370b0f660146105b457600080fd5b80633932abb1146104095780633bccf4fd1461041e5780633e4f49e61461043e578063438596321461046b578063452115d6146104b557600080fd5b8063150b7a0211610224578063150b7a021461033e578063160cbed7146103825780632656227d146103a25780632d63f693146103b55780632fe3e261146103d557600080fd5b806301ffc9a71461028857806302a251a3146102bd57806303420181146102dc57806306f3f9e6146102fc57806306fdde031461031c57600080fd5b36610283573061026e6108d2565b6001600160a01b03161461028157600080fd5b005b600080fd5b34801561029457600080fd5b506102a86102a3366004613245565b6108eb565b60405190151581526020015b60405180910390f35b3480156102c957600080fd5b506005545b6040519081526020016102b4565b3480156102e857600080fd5b506102ce6102f7366004613391565b6108fc565b34801561030857600080fd5b50610281610317366004613437565b6109f4565b34801561032857600080fd5b50610331610a8c565b6040516102b491906134a8565b34801561034a57600080fd5b506103696103593660046134d0565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102b4565b34801561038e57600080fd5b506102ce61039d3660046136a7565b610b1e565b6102ce6103b03660046136a7565b610ec5565b3480156103c157600080fd5b506102ce6103d0366004613437565b610fb2565b3480156103e157600080fd5b506102ce7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561041557600080fd5b506004546102ce565b34801561042a57600080fd5b506102ce610439366004613736565b610fe9565b34801561044a57600080fd5b5061045e610459366004613437565b61105f565b6040516102b4919061379a565b34801561047757600080fd5b506102a86104863660046137c2565b6000828152600b602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104c157600080fd5b506102ce6104d03660046136a7565b61106a565b3480156104e157600080fd5b5061050f6104f0366004613437565b6000908152600b60205260409020805460018201546002909201549092565b604080519384526020840192909252908201526060016102b4565b34801561053657600080fd5b506040805180820190915260018152603160f81b6020820152610331565b34801561056057600080fd5b506102ce61056f3660046137f2565b611081565b34801561058057600080fd5b506102ce61058f36600461381e565b6110aa565b3480156105a057600080fd5b506102ce6105af366004613437565b6110f4565b3480156105c057600080fd5b506102816105cf366004613437565b611189565b3480156105e057600080fd5b506102ce6105ef3660046138a1565b611215565b34801561060057600080fd5b506102ce61060f3660046138fa565b611267565b34801561062057600080fd5b5060646102ce565b34801561063457600080fd5b506102ce6106433660046139ae565b61150b565b34801561065457600080fd5b506102ce611522565b34801561066957600080fd5b50610281610678366004613a06565b61154c565b34801561068957600080fd5b506102ce610698366004613437565b6115d8565b3480156106a957600080fd5b506102ce611604565b3480156106be57600080fd5b5061028161160f565b3480156106d357600080fd5b506103696106e2366004613a23565b63bc197c8160e01b95945050505050565b3480156106ff57600080fd5b506102ce61070e366004613437565b611679565b610281610721366004613ab6565b6116a8565b34801561073257600080fd5b506102ce6107413660046136a7565b6117bc565b34801561075257600080fd5b506007546001600160a01b03165b6040516001600160a01b0390911681526020016102b4565b34801561078457600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610331565b3480156107ca57600080fd5b506102ce7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156107fe57600080fd5b5061028161080d366004613437565b6117f6565b34801561081e57600080fd5b506102ce61082d366004613af9565b611882565b34801561083e57600080fd5b5061028161084d366004613437565b6118a3565b34801561085e57600080fd5b5061036961086d366004613b25565b63f23a6e6160e01b95945050505050565b34801561088a57600080fd5b506102ce610899366004613437565b61192f565b3480156108aa57600080fd5b506107607f000000000000000000000000000000000000000000000000000000000000000081565b60006108e66007546001600160a01b031690565b905090565b60006108f682611a89565b92915050565b6000806109a06109987fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c604051610938929190613b8d565b60405180910390208b8051906020012060405160200161097d959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611aae565b868686611afc565b90506109e68a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611b1a915050565b9a9950505050505050505050565b6109fc6108d2565b6001600160a01b0316336001600160a01b031614610a355760405162461bcd60e51b8152600401610a2c90613b9d565b60405180910390fd5b30610a3e6108d2565b6001600160a01b031614610a805760008036604051610a5e929190613b8d565b604051809103902090505b80610a746002611c7c565b14610a7e57610a69565b505b610a8981611cfb565b50565b606060008054610a9b90613bd4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac790613bd4565b8015610b145780601f10610ae957610100808354040283529160200191610b14565b820191906000526020600020905b815481529060010190602001808311610af757829003601f168201915b5050505050905090565b600080610b2d868686866117bc565b90506004610b3a8261105f565b6007811115610b4b57610b4b613784565b14610b685760405162461bcd60e51b8152600401610a2c90613c0f565b60075460408051630d48571f60e31b815290516000926001600160a01b031691636a42b8f8916004808301926020929190829003018186803b158015610bad57600080fd5b505afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190613c50565b610bef9042613c7f565b9050610c11610bfd82611e47565b600084815260086020526040902090611eaf565b60005b8751811015610e805760075488516001600160a01b039091169063f2b06537908a9084908110610c4657610c46613c97565b6020026020010151898481518110610c6057610c60613c97565b6020026020010151898581518110610c7a57610c7a613c97565b602002602001015186604051602001610c969493929190613cad565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610cca91815260200190565b60206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190613cf3565b15610d985760405162461bcd60e51b815260206004820152604260248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a206964656e746960448201527f63616c2070726f706f73616c20616374696f6e20616c72656164792071756575606482015261195960f21b608482015260a401610a2c565b60075488516001600160a01b0390911690633a66f901908a9084908110610dc157610dc1613c97565b6020026020010151898481518110610ddb57610ddb613c97565b6020026020010151898581518110610df557610df5613c97565b6020026020010151866040518563ffffffff1660e01b8152600401610e1d9493929190613cad565b602060405180830381600087803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190613c50565b50610e7981613d15565b9050610c14565b5060408051838152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289291015b60405180910390a15095945050505050565b600080610ed4868686866117bc565b90506000610ee18261105f565b90506004816007811115610ef757610ef7613784565b1480610f1457506005816007811115610f1257610f12613784565b145b610f305760405162461bcd60e51b8152600401610a2c90613c0f565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610f8e8288888888611ecd565b610f9b8288888888611f70565b610fa88288888888611f7d565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190611037906109989060800161097d565b905061105487828860405180602001604052806000815250611fb6565b979650505050505050565b60006108f682611fd9565b6000611078858585856120c9565b95945050505050565b6000803390506110a284828560405180602001604052806000815250611fb6565b949350505050565b60008033905061105487828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611b1a915050565b600a5460009080611109575050600954919050565b6000600a611118600184613d30565b8154811061112857611128613c97565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b0316928201929092529150841061117e57602001516001600160e01b03169392505050565b6110a2600a856120d7565b6111916108d2565b6001600160a01b0316336001600160a01b0316146111c15760405162461bcd60e51b8152600401610a2c90613b9d565b306111ca6108d2565b6001600160a01b03161461120c57600080366040516111ea929190613b8d565b604051809103902090505b806112006002611c7c565b1461120a576111f5565b505b610a8981612189565b60008033905061125d86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fb692505050565b9695505050505050565b6000611271611604565b6112803361082d600143613d30565b10156112e85760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b6064820152608401610a2c565b60006112fd86868686805190602001206117bc565b905084518651146113205760405162461bcd60e51b8152600401610a2c90613d47565b83518651146113415760405162461bcd60e51b8152600401610a2c90613d47565b60008651116113925760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a2c565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156114125760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a2c565b600061142561142060045490565b611e47565b61142e43611e47565b6114389190613d88565b9050600061144861142060055490565b6114529083613d88565b905061145e8383611eaf565b61146b6001840182611eaf565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156114a9576114a96132c6565b6040519080825280602002602001820160405280156114dc57816020015b60608152602001906001900390816114c75790505b508c88888e6040516114f699989796959493929190613e7c565b60405180910390a15091979650505050505050565b60006115188484846121ca565b90505b9392505050565b600a546000901561154557611537600a6119dd565b6001600160e01b0316905090565b5060095490565b6115546108d2565b6001600160a01b0316336001600160a01b0316146115845760405162461bcd60e51b8152600401610a2c90613b9d565b3061158d6108d2565b6001600160a01b0316146115cf57600080366040516115ad929190613b8d565b604051809103902090505b806115c36002611c7c565b146115cd576115b8565b505b610a898161226f565b60008181526008602090815260408083208151928301909152546001600160401b031690819052610fda565b60006108e660065490565b600760009054906101000a90046001600160a01b03166001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561165f57600080fd5b505af1158015611673573d6000803e3d6000fd5b50505050565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610fda565b6116b06108d2565b6001600160a01b0316336001600160a01b0316146116e05760405162461bcd60e51b8152600401610a2c90613b9d565b306116e96108d2565b6001600160a01b03161461172b5760008036604051611709929190613b8d565b604051809103902090505b8061171f6002611c7c565b1461172957611714565b505b600080856001600160a01b0316858585604051611749929190613b8d565b60006040518083038185875af1925050503d8060008114611786576040519150601f19603f3d011682016040523d82523d6000602084013e61178b565b606091505b50915091506117b382826040518060600160405280602881526020016140d3602891396122d8565b50505050505050565b6000848484846040516020016117d59493929190613f6b565b60408051601f19818403018152919052805160209091012095945050505050565b6117fe6108d2565b6001600160a01b0316336001600160a01b03161461182e5760405162461bcd60e51b8152600401610a2c90613b9d565b306118376108d2565b6001600160a01b0316146118795760008036604051611857929190613b8d565b604051809103902090505b8061186d6002611c7c565b1461187757611862565b505b610a89816122f1565b600061151b838361189e60408051602081019091526000815290565b6121ca565b6118ab6108d2565b6001600160a01b0316336001600160a01b0316146118db5760405162461bcd60e51b8152600401610a2c90613b9d565b306118e46108d2565b6001600160a01b0316146119265760008036604051611904929190613b8d565b604051809103902090505b8061191a6002611c7c565b146119245761190f565b505b610a8981612392565b60006108f6826123d3565b60006001600160e01b038211156119a35760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610a2c565b5090565b6000806119c5846119b743611a24565b6119c08661193a565b61248c565b6001600160e01b0391821693501690505b9250929050565b80546000908015611a1b57611a05836119f7600184613d30565b600091825260209091200190565b54600160201b90046001600160e01b031661151b565b60009392505050565b600063ffffffff8211156119a35760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610a2c565b60006001600160e01b03198216636e665ced60e01b14806108f657506108f682612636565b60006108f6611abb6126a1565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b0d878787876127c8565b91509150610fa88161288c565b6000858152600160208190526040822090611b348861105f565b6007811115611b4557611b45613784565b14611b9e5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a2c565b604080516020810190915281546001600160401b031690819052600090611bc7908890866121ca565b9050611bd688888884886129da565b8351611c2857866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051611c1b9493929190613fb6565b60405180910390a2611054565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051611c69959493929190613fde565b60405180910390a2979650505050505050565b6000611c978254600f81810b600160801b909204900b131590565b15611cb557604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b6064811115611d7e5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a2c565b6000611d88611522565b90508015801590611d995750600a54155b15611dfd576040805180820190915260008152600a9060208101611dbc8461193a565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b611e08600a836119a7565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b60006001600160401b038211156119a35760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610a2c565b815467ffffffffffffffff19166001600160401b0391909116179055565b30611ed66108d2565b6001600160a01b031614611f695760005b8451811015611f6757306001600160a01b0316858281518110611f0c57611f0c613c97565b60200260200101516001600160a01b03161415611f5757611f57838281518110611f3857611f38613c97565b6020026020010151805190602001206002612b5990919063ffffffff16565b611f6081613d15565b9050611ee7565b505b5050505050565b611f698585858585612b95565b30611f866108d2565b6001600160a01b031614611f6957600254600f81810b600160801b909204900b1315611f69576000600255611f69565b600061107885858585611fd460408051602081019091526000815290565b611b1a565b600080611fe583612d1a565b90506004816007811115611ffb57611ffb613784565b146120065792915050565b6000612011846115d8565b90508061201f575092915050565b600760009054906101000a90046001600160a01b03166001600160a01b031663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b15801561206d57600080fd5b505afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a59190613c50565b6120af9082613c7f565b42106120bf575060069392505050565b5060059392505050565b600061107885858585612e26565b60004382106121285760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610a2c565b600061213383611a24565b8454909150600061214686848385612f41565b905080156121735761215d866119f7600184613d30565b54600160201b90046001600160e01b0316612176565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a89060440160206040518083038186803b15801561223757600080fd5b505afa15801561224b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190613c50565b600754604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b606083156122e757508161151b565b61151b8383612f9f565b600081116123515760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b6064820152608401610a2c565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b600060646123e0836110f4565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c9060240160206040518083038186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190613c50565b6124829190614024565b6108f69190614043565b8254600090819080156125d95760006124aa876119f7600185613d30565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b03166020840152919250908716101561252b5760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b65790000000000000000006044820152606401610a2c565b8563ffffffff16816000015163ffffffff16141561257a5784612553886119f7600186613d30565b80546001600160e01b0392909216600160201b0263ffffffff9092169190911790556125c9565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b60200151925083915061262e9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b60006001600160e01b0319821663bf26d89760e01b148061266757506001600160e01b031982166379dd796f60e01b145b8061268257506001600160e01b03198216630271189760e51b145b806108f657506301ffc9a760e01b6001600160e01b03198316146108f6565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156126fa57507f000000000000000000000000000000000000000000000000000000000000000046145b1561272457507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156127ff5750600090506003612883565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612853573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661287c57600060019250925050612883565b9150600090505b94509492505050565b60008160048111156128a0576128a0613784565b14156128a95750565b60018160048111156128bd576128bd613784565b141561290b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a2c565b600281600481111561291f5761291f613784565b141561296d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a2c565b600381600481111561298157612981613784565b1415610a895760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a2c565b6000858152600b602090815260408083206001600160a01b0388168452600381019092529091205460ff1615612a625760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b6064820152608401610a2c565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415612ab35782816000016000828254612aa89190613c7f565b90915550611f679050565b60ff841660011415612ad35782816001016000828254612aa89190613c7f565b60ff841660021415612af35782816002016000828254612aa89190613c7f565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b6064820152608401610a2c565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b6000612ba0866115d8565b905060008111612c0c5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f7254696d656c6f636b436f6d706f756e643a2070726f706f73604482015270185b081b9bdd081e595d081c5d595d5959607a1b6064820152608401610a2c565b600754612c22906001600160a01b031634612fc9565b60005b85518110156117b35760075486516001600160a01b0390911690630825f38f90889084908110612c5757612c57613c97565b6020026020010151878481518110612c7157612c71613c97565b6020026020010151878581518110612c8b57612c8b613c97565b6020026020010151866040518563ffffffff1660e01b8152600401612cb39493929190613cad565b600060405180830381600087803b158015612ccd57600080fd5b505af1158015612ce1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d099190810190614065565b50612d1381613d15565b9050612c25565b6000818152600160205260408120600281015460ff1615612d3e5750600792915050565b6002810154610100900460ff1615612d595750600292915050565b6000612d6484610fb2565b905080612db35760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a2c565b438110612dc4575060009392505050565b6000612dcf85611679565b9050438110612de357506001949350505050565b612dec856130e7565b8015612e0b57506000858152600b602052604090208054600190910154115b15612e1b57506004949350505050565b506003949350505050565b600080612e358686868661311e565b90506000612e42826115d8565b90508015610fa85760005b8751811015612f1e5760075488516001600160a01b039091169063591fcdfe908a9084908110612e7f57612e7f613c97565b6020026020010151898481518110612e9957612e99613c97565b6020026020010151898581518110612eb357612eb3613c97565b6020026020010151866040518563ffffffff1660e01b8152600401612edb9493929190613cad565b600060405180830381600087803b158015612ef557600080fd5b505af1158015612f09573d6000803e3d6000fd5b5050505080612f1790613d15565b9050612e4d565b506000828152600860205260409020805467ffffffffffffffff19169055610fa8565b60005b81831015612f97576000612f58848461322a565b60008781526020902090915063ffffffff86169082015463ffffffff161115612f8357809250612f91565b612f8e816001613c7f565b93505b50612f44565b509392505050565b815115612faf5781518083602001fd5b8060405162461bcd60e51b8152600401610a2c91906134a8565b804710156130195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610a2c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613066576040519150601f19603f3d011682016040523d82523d6000602084013e61306b565b606091505b50509050806130e25760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610a2c565b505050565b6000818152600b60205260408120600281015460018201546131099190613c7f565b61311561089985610fb2565b11159392505050565b60008061312d868686866117bc565b9050600061313a8261105f565b9050600281600781111561315057613150613784565b141580156131705750600681600781111561316d5761316d613784565b14155b801561318e5750600781600781111561318b5761318b613784565b14155b6131da5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a2070726f706f73616c206e6f74206163746976650000006044820152606401610a2c565b60008281526001602052604090819020600201805461ff001916610100179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610eb39084815260200190565b60006132396002848418614043565b61151b90848416613c7f565b60006020828403121561325757600080fd5b81356001600160e01b03198116811461151b57600080fd5b803560ff8116811461328057600080fd5b919050565b60008083601f84011261329757600080fd5b5081356001600160401b038111156132ae57600080fd5b6020830191508360208285010111156119d657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613304576133046132c6565b604052919050565b60006001600160401b03821115613325576133256132c6565b50601f01601f191660200190565b60006133466133418461330c565b6132dc565b905082815283838301111561335a57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261338257600080fd5b61151b83833560208501613333565b60008060008060008060008060e0898b0312156133ad57600080fd5b883597506133bd60208a0161326f565b965060408901356001600160401b03808211156133d957600080fd5b6133e58c838d01613285565b909850965060608b01359150808211156133fe57600080fd5b5061340b8b828c01613371565b94505061341a60808a0161326f565b925060a0890135915060c089013590509295985092959890939650565b60006020828403121561344957600080fd5b5035919050565b60005b8381101561346b578181015183820152602001613453565b838111156116735750506000910152565b60008151808452613494816020860160208601613450565b601f01601f19169290920160200192915050565b60208152600061151b602083018461347c565b6001600160a01b0381168114610a8957600080fd5b600080600080608085870312156134e657600080fd5b84356134f1816134bb565b93506020850135613501816134bb565b92506040850135915060608501356001600160401b0381111561352357600080fd5b61352f87828801613371565b91505092959194509250565b60006001600160401b03821115613554576135546132c6565b5060051b60200190565b600082601f83011261356f57600080fd5b8135602061357f6133418361353b565b82815260059290921b8401810191818101908684111561359e57600080fd5b8286015b848110156135c25780356135b5816134bb565b83529183019183016135a2565b509695505050505050565b600082601f8301126135de57600080fd5b813560206135ee6133418361353b565b82815260059290921b8401810191818101908684111561360d57600080fd5b8286015b848110156135c25780358352918301918301613611565b600082601f83011261363957600080fd5b813560206136496133418361353b565b82815260059290921b8401810191818101908684111561366857600080fd5b8286015b848110156135c25780356001600160401b0381111561368b5760008081fd5b6136998986838b0101613371565b84525091830191830161366c565b600080600080608085870312156136bd57600080fd5b84356001600160401b03808211156136d457600080fd5b6136e08883890161355e565b955060208701359150808211156136f657600080fd5b613702888389016135cd565b9450604087013591508082111561371857600080fd5b5061372587828801613628565b949793965093946060013593505050565b600080600080600060a0868803121561374e57600080fd5b8535945061375e6020870161326f565b935061376c6040870161326f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106137bc57634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156137d557600080fd5b8235915060208301356137e7816134bb565b809150509250929050565b6000806040838503121561380557600080fd5b823591506138156020840161326f565b90509250929050565b60008060008060006080868803121561383657600080fd5b853594506138466020870161326f565b935060408601356001600160401b038082111561386257600080fd5b61386e89838a01613285565b9095509350606088013591508082111561388757600080fd5b5061389488828901613371565b9150509295509295909350565b600080600080606085870312156138b757600080fd5b843593506138c76020860161326f565b925060408501356001600160401b038111156138e257600080fd5b6138ee87828801613285565b95989497509550505050565b6000806000806080858703121561391057600080fd5b84356001600160401b038082111561392757600080fd5b6139338883890161355e565b9550602087013591508082111561394957600080fd5b613955888389016135cd565b9450604087013591508082111561396b57600080fd5b61397788838901613628565b9350606087013591508082111561398d57600080fd5b508501601f8101871361399f57600080fd5b61352f87823560208401613333565b6000806000606084860312156139c357600080fd5b83356139ce816134bb565b92506020840135915060408401356001600160401b038111156139f057600080fd5b6139fc86828701613371565b9150509250925092565b600060208284031215613a1857600080fd5b813561151b816134bb565b600080600080600060a08688031215613a3b57600080fd5b8535613a46816134bb565b94506020860135613a56816134bb565b935060408601356001600160401b0380821115613a7257600080fd5b613a7e89838a016135cd565b94506060880135915080821115613a9457600080fd5b613aa089838a016135cd565b9350608088013591508082111561388757600080fd5b60008060008060608587031215613acc57600080fd5b8435613ad7816134bb565b93506020850135925060408501356001600160401b038111156138e257600080fd5b60008060408385031215613b0c57600080fd5b8235613b17816134bb565b946020939093013593505050565b600080600080600060a08688031215613b3d57600080fd5b8535613b48816134bb565b94506020860135613b58816134bb565b9350604086013592506060860135915060808601356001600160401b03811115613b8157600080fd5b61389488828901613371565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c90821680613be857607f821691505b60208210811415613c0957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b600060208284031215613c6257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613c9257613c92613c69565b500190565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260a06040820152600060a082015260c060608201526000613ce260c083018561347c565b905082608083015295945050505050565b600060208284031215613d0557600080fd5b8151801515811461151b57600080fd5b6000600019821415613d2957613d29613c69565b5060010190565b600082821015613d4257613d42613c69565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613daa57613daa613c69565b01949350505050565b600081518084526020808501945080840160005b83811015613dec5781516001600160a01b031687529582019590820190600101613dc7565b509495945050505050565b600081518084526020808501945080840160005b83811015613dec57815187529582019590820190600101613e0b565b600081518084526020808501808196508360051b8101915082860160005b85811015613e6f578284038952613e5d84835161347c565b98850198935090840190600101613e45565b5091979650505050505050565b60006101208b8352602060018060a01b038c1681850152816040850152613ea58285018c613db3565b91508382036060850152613eb9828b613df7565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613f0a57601f19878403018552613ef883835161347c565b94860194925090850190600101613edc565b505086810360a0880152613f1e818c613e27565b945050505050613f3960c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613f5b818561347c565b9c9b505050505050505050505050565b608081526000613f7e6080830187613db3565b8281036020840152613f908187613df7565b90508281036040840152613fa48186613e27565b91505082606083015295945050505050565b84815260ff8416602082015282604082015260806060820152600061125d608083018461347c565b85815260ff8516602082015283604082015260a06060820152600061400660a083018561347c565b8281036080840152614018818561347c565b98975050505050505050565b600081600019048311821515161561403e5761403e613c69565b500290565b60008261406057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561407757600080fd5b81516001600160401b0381111561408d57600080fd5b8201601f8101841361409e57600080fd5b80516140ac6133418261330c565b8181528560208385010111156140c157600080fd5b61107882602083016020860161345056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a2646970667358221220242ad4a15ab1db823580279019ccaf35275be2486db127f33550b29b0143405864736f6c63430008090033";

    public static final String FUNC_BALLOT_TYPEHASH = "BALLOT_TYPEHASH";

    public static final String FUNC_COUNTING_MODE = "COUNTING_MODE";

    public static final String FUNC_EXTENDED_BALLOT_TYPEHASH = "EXTENDED_BALLOT_TYPEHASH";

    public static final String FUNC___ACCEPTADMIN = "__acceptAdmin";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_CASTVOTEBYSIG = "castVoteBySig";

    public static final String FUNC_CASTVOTEWITHREASON = "castVoteWithReason";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMS = "castVoteWithReasonAndParams";

    public static final String FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG = "castVoteWithReasonAndParamsBySig";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_GETVOTES = "getVotes";

    public static final String FUNC_GETVOTESWITHPARAMS = "getVotesWithParams";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_HASHPROPOSAL = "hashProposal";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";

    public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PROPOSALDEADLINE = "proposalDeadline";

    public static final String FUNC_PROPOSALETA = "proposalEta";

    public static final String FUNC_PROPOSALSNAPSHOT = "proposalSnapshot";

    public static final String FUNC_PROPOSALTHRESHOLD = "proposalThreshold";

    public static final String FUNC_PROPOSALVOTES = "proposalVotes";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_QUEUE = "queue";

    public static final String FUNC_QUORUM = "quorum";

    public static final String FUNC_QUORUMDENOMINATOR = "quorumDenominator";

    public static final String FUNC_quorumNumerator = "quorumNumerator";

    public static final String FUNC_RELAY = "relay";

    public static final String FUNC_SETPROPOSALTHRESHOLD = "setProposalThreshold";

    public static final String FUNC_SETVOTINGDELAY = "setVotingDelay";

    public static final String FUNC_SETVOTINGPERIOD = "setVotingPeriod";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TIMELOCK = "timelock";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_UPDATEQUORUMNUMERATOR = "updateQuorumNumerator";

    public static final String FUNC_UPDATETIMELOCK = "updateTimelock";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTINGDELAY = "votingDelay";

    public static final String FUNC_VOTINGPERIOD = "votingPeriod";

    public static final Event PROPOSALCANCELED_EVENT = new Event("ProposalCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PROPOSALEXECUTED_EVENT = new Event("ProposalExecuted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALQUEUED_EVENT = new Event("ProposalQueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PROPOSALTHRESHOLDSET_EVENT = new Event("ProposalThresholdSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event QUORUMNUMERATORUPDATED_EVENT = new Event("QuorumNumeratorUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TIMELOCKCHANGE_EVENT = new Event("TimelockChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTECASTWITHPARAMS_EVENT = new Event("VoteCastWithParams", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event VOTINGDELAYSET_EVENT = new Event("VotingDelaySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VOTINGPERIODSET_EVENT = new Event("VotingPeriodSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected GovernorTimelockCompoundMock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GovernorTimelockCompoundMock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GovernorTimelockCompoundMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GovernorTimelockCompoundMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ProposalCanceledEventResponse> getProposalCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCANCELED_EVENT, transactionReceipt);
        ArrayList<ProposalCanceledEventResponse> responses = new ArrayList<ProposalCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCanceledEventResponse>() {
            @Override
            public ProposalCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCANCELED_EVENT, log);
                ProposalCanceledEventResponse typedResponse = new ProposalCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCanceledEventResponse> proposalCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCANCELED_EVENT));
        return proposalCanceledEventFlowable(filter);
    }

    public static List<ProposalCreatedEventResponse> getProposalCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
            typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
            typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
            typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalCreatedEventResponse>() {
            @Override
            public ProposalCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
                ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.proposer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.targets = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
                typedResponse.signatures = (List<String>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
                typedResponse.calldatas = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
                typedResponse.startBlock = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.endBlock = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(8).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public static List<ProposalExecutedEventResponse> getProposalExecutedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALEXECUTED_EVENT, transactionReceipt);
        ArrayList<ProposalExecutedEventResponse> responses = new ArrayList<ProposalExecutedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalExecutedEventResponse>() {
            @Override
            public ProposalExecutedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALEXECUTED_EVENT, log);
                ProposalExecutedEventResponse typedResponse = new ProposalExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalExecutedEventResponse> proposalExecutedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALEXECUTED_EVENT));
        return proposalExecutedEventFlowable(filter);
    }

    public static List<ProposalQueuedEventResponse> getProposalQueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALQUEUED_EVENT, transactionReceipt);
        ArrayList<ProposalQueuedEventResponse> responses = new ArrayList<ProposalQueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalQueuedEventResponse typedResponse = new ProposalQueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eta = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalQueuedEventResponse> proposalQueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalQueuedEventResponse>() {
            @Override
            public ProposalQueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALQUEUED_EVENT, log);
                ProposalQueuedEventResponse typedResponse = new ProposalQueuedEventResponse();
                typedResponse.log = log;
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eta = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalQueuedEventResponse> proposalQueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALQUEUED_EVENT));
        return proposalQueuedEventFlowable(filter);
    }

    public static List<ProposalThresholdSetEventResponse> getProposalThresholdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, transactionReceipt);
        ArrayList<ProposalThresholdSetEventResponse> responses = new ArrayList<ProposalThresholdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposalThresholdSetEventResponse>() {
            @Override
            public ProposalThresholdSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSALTHRESHOLDSET_EVENT, log);
                ProposalThresholdSetEventResponse typedResponse = new ProposalThresholdSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newProposalThreshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposalThresholdSetEventResponse> proposalThresholdSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALTHRESHOLDSET_EVENT));
        return proposalThresholdSetEventFlowable(filter);
    }

    public static List<QuorumNumeratorUpdatedEventResponse> getQuorumNumeratorUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, transactionReceipt);
        ArrayList<QuorumNumeratorUpdatedEventResponse> responses = new ArrayList<QuorumNumeratorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, QuorumNumeratorUpdatedEventResponse>() {
            @Override
            public QuorumNumeratorUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUORUMNUMERATORUPDATED_EVENT, log);
                QuorumNumeratorUpdatedEventResponse typedResponse = new QuorumNumeratorUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.oldQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newQuorumNumerator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QuorumNumeratorUpdatedEventResponse> quorumNumeratorUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUORUMNUMERATORUPDATED_EVENT));
        return quorumNumeratorUpdatedEventFlowable(filter);
    }

    public static List<TimelockChangeEventResponse> getTimelockChangeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TIMELOCKCHANGE_EVENT, transactionReceipt);
        ArrayList<TimelockChangeEventResponse> responses = new ArrayList<TimelockChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TimelockChangeEventResponse typedResponse = new TimelockChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldTimelock = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newTimelock = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TimelockChangeEventResponse> timelockChangeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TimelockChangeEventResponse>() {
            @Override
            public TimelockChangeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TIMELOCKCHANGE_EVENT, log);
                TimelockChangeEventResponse typedResponse = new TimelockChangeEventResponse();
                typedResponse.log = log;
                typedResponse.oldTimelock = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newTimelock = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TimelockChangeEventResponse> timelockChangeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TIMELOCKCHANGE_EVENT));
        return timelockChangeEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastEventResponse>() {
            @Override
            public VoteCastEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECAST_EVENT, log);
                VoteCastEventResponse typedResponse = new VoteCastEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public static List<VoteCastWithParamsEventResponse> getVoteCastWithParamsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, transactionReceipt);
        ArrayList<VoteCastWithParamsEventResponse> responses = new ArrayList<VoteCastWithParamsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteCastWithParamsEventResponse>() {
            @Override
            public VoteCastWithParamsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTECASTWITHPARAMS_EVENT, log);
                VoteCastWithParamsEventResponse typedResponse = new VoteCastWithParamsEventResponse();
                typedResponse.log = log;
                typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.support = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.params = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteCastWithParamsEventResponse> voteCastWithParamsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECASTWITHPARAMS_EVENT));
        return voteCastWithParamsEventFlowable(filter);
    }

    public static List<VotingDelaySetEventResponse> getVotingDelaySetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGDELAYSET_EVENT, transactionReceipt);
        ArrayList<VotingDelaySetEventResponse> responses = new ArrayList<VotingDelaySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingDelaySetEventResponse>() {
            @Override
            public VotingDelaySetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGDELAYSET_EVENT, log);
                VotingDelaySetEventResponse typedResponse = new VotingDelaySetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingDelay = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingDelaySetEventResponse> votingDelaySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGDELAYSET_EVENT));
        return votingDelaySetEventFlowable(filter);
    }

    public static List<VotingPeriodSetEventResponse> getVotingPeriodSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTINGPERIODSET_EVENT, transactionReceipt);
        ArrayList<VotingPeriodSetEventResponse> responses = new ArrayList<VotingPeriodSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotingPeriodSetEventResponse>() {
            @Override
            public VotingPeriodSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTINGPERIODSET_EVENT, log);
                VotingPeriodSetEventResponse typedResponse = new VotingPeriodSetEventResponse();
                typedResponse.log = log;
                typedResponse.oldVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newVotingPeriod = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotingPeriodSetEventResponse> votingPeriodSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTINGPERIODSET_EVENT));
        return votingPeriodSetEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> COUNTING_MODE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTING_MODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> EXTENDED_BALLOT_TYPEHASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXTENDED_BALLOT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> __acceptAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC___ACCEPTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancel(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] salt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(salt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger proposalId, BigInteger support) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteBySig(BigInteger proposalId, BigInteger support, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReason(BigInteger proposalId, BigInteger support, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASON, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParams(BigInteger proposalId, BigInteger support, String reason, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> castVoteWithReasonAndParamsBySig(BigInteger proposalId, BigInteger support, String reason, byte[] params, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CASTVOTEWITHREASONANDPARAMSBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.generated.Uint8(support), 
                new org.web3j.abi.datatypes.Utf8String(reason), 
                new org.web3j.abi.datatypes.DynamicBytes(params), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> execute(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> getVotes(String account, BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getVotesWithParams(String account, BigInteger blockNumber, byte[] params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTESWITHPARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber), 
                new org.web3j.abi.datatypes.DynamicBytes(params)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(BigInteger proposalId, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> hashProposal(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASHPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155BatchReceived(String param0, String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155BATCHRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC1155Received(String param0, String param1, BigInteger param2, BigInteger param3, byte[] param4) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC1155RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.generated.Uint256(param3), 
                new org.web3j.abi.datatypes.DynamicBytes(param4)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1), 
                new org.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> proposalDeadline(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALDEADLINE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalEta(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALETA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalSnapshot(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> proposalThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> proposalVotes(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROPOSALVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> propose(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, String description) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> queue(List<String> targets, List<BigInteger> values, List<byte[]> calldatas, byte[] descriptionHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_QUEUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(targets, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(calldatas, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(descriptionHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> quorum(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumDenominator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUORUMDENOMINATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> quorumNumerator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_quorumNumerator, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> relay(String target, BigInteger value, byte[] data, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, target), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setProposalThreshold(BigInteger newProposalThreshold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROPOSALTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newProposalThreshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingDelay(BigInteger newVotingDelay) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGDELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVotingPeriod(BigInteger newVotingPeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newVotingPeriod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> state(BigInteger proposalId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> timelock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TIMELOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateQuorumNumerator(BigInteger newQuorumNumerator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEQUORUMNUMERATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newQuorumNumerator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTimelock(String newTimelock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETIMELOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newTimelock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> votingDelay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> votingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GovernorTimelockCompoundMock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorTimelockCompoundMock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GovernorTimelockCompoundMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GovernorTimelockCompoundMock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GovernorTimelockCompoundMock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GovernorTimelockCompoundMock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GovernorTimelockCompoundMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GovernorTimelockCompoundMock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GovernorTimelockCompoundMock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockCompoundMock.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<GovernorTimelockCompoundMock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockCompoundMock.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorTimelockCompoundMock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockCompoundMock.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<GovernorTimelockCompoundMock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name_, String token_, BigInteger votingDelay_, BigInteger votingPeriod_, String timelock_, BigInteger quorumNumerator_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Address(160, token_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingDelay_), 
                new org.web3j.abi.datatypes.generated.Uint256(votingPeriod_), 
                new org.web3j.abi.datatypes.Address(160, timelock_), 
                new org.web3j.abi.datatypes.generated.Uint256(quorumNumerator_)));
        return deployRemoteCall(GovernorTimelockCompoundMock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ProposalCanceledEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public String proposer;

        public List<String> targets;

        public List<BigInteger> values;

        public List<String> signatures;

        public List<byte[]> calldatas;

        public BigInteger startBlock;

        public BigInteger endBlock;

        public String description;
    }

    public static class ProposalExecutedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;
    }

    public static class ProposalQueuedEventResponse extends BaseEventResponse {
        public BigInteger proposalId;

        public BigInteger eta;
    }

    public static class ProposalThresholdSetEventResponse extends BaseEventResponse {
        public BigInteger oldProposalThreshold;

        public BigInteger newProposalThreshold;
    }

    public static class QuorumNumeratorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger oldQuorumNumerator;

        public BigInteger newQuorumNumerator;
    }

    public static class TimelockChangeEventResponse extends BaseEventResponse {
        public String oldTimelock;

        public String newTimelock;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;
    }

    public static class VoteCastWithParamsEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger proposalId;

        public BigInteger support;

        public BigInteger weight;

        public String reason;

        public byte[] params;
    }

    public static class VotingDelaySetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingDelay;

        public BigInteger newVotingDelay;
    }

    public static class VotingPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger oldVotingPeriod;

        public BigInteger newVotingPeriod;
    }
}
