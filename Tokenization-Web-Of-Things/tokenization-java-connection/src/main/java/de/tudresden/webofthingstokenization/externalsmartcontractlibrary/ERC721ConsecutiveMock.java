package de.tudresden.webofthingstokenization.externalsmartcontractlibrary;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class ERC721ConsecutiveMock extends Contract {
    public static final String BINARY = "6101406040523480156200001257600080fd5b50604051620044cd380380620044cd8339810160408190526200003591620012fb565b84604051806040016040528060018152602001603160f81b815250868681600090805190602001906200006a92919062001058565b5080516200008090600190602084019062001058565b50506008805460ff1916905550815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c0948501909152815191909501209052919091526101205260005b8351811015620001865762000173848281518110620001425762000142620013dc565b60200260200101518583815181106200015f576200015f620013dc565b6020026020010151620001fe60201b60201c565b6200017e8162001408565b90506200011f565b5060005b8251811015620001f257620001de838281518110620001ad57620001ad620013dc565b6020026020010151838381518110620001ca57620001ca620013dc565b60200260200101516200027960201b60201c565b50620001ea8162001408565b90506200018a565b505050505050620014f1565b6001600160a01b0382811660008181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46200027481836200026e86620004c5565b620004d8565b505050565b6000806200028662000629565b90506001600160601b03831615620004be57620002ae306200066c60201b62000aef1760201c565b15620003275760405162461bcd60e51b815260206004820152603a60248201527f455243373231436f6e73656375746976653a206261746368206d696e74696e6760448201527f207265737472696374656420746f20636f6e7374727563746f7200000000000060648201526084015b60405180910390fd5b6001600160a01b038416620003935760405162461bcd60e51b815260206004820152602b60248201527f455243373231436f6e73656375746976653a206d696e7420746f20746865207a60448201526a65726f206164647265737360a81b60648201526084016200031e565b6113886001600160601b0384161115620003fb5760405162461bcd60e51b815260206004820152602260248201527f455243373231436f6e73656375746976653a20626174636820746f6f206c6172604482015261676560f01b60648201526084016200031e565b620004166000856001600160601b038085169087166200067b565b6000600162000426858462001426565b62000432919062001454565b905062000451818660066200069a60201b62000afe179092919060201c565b50506040516001600160601b0382811682526001600160a01b038716916000918516907fdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d9060200160405180910390a4620004bc6000866001600160601b03808616908816620006b7565b505b9392505050565b6000620004d282620006d0565b92915050565b816001600160a01b0316836001600160a01b031614158015620004fb5750600081115b1562000274576001600160a01b0383161562000593576001600160a01b0383166000908152600a602090815260408220829162000550919062000b1962000758821b1790869062000b2562000766821b17901c565b91509150846001600160a01b0316600080516020620044ad833981519152838360405162000588929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161562000274576001600160a01b0382166000908152600a6020908152604082208291620005e2919062000b5062000793821b1790869062000b2562000766821b17901c565b91509150836001600160a01b0316600080516020620044ad83398151915283836040516200061a929190918252602082015260400190565b60405180910390a25050505050565b6000806000620006456006620007a160201b62000b5c1760201c565b5091509150816200065857600062000665565b6200066581600162001426565b9250505090565b6001600160a01b03163b151590565b62000694848484846200083760201b62000be31760201c565b50505050565b600080620006aa858585620008b9565b915091505b935093915050565b620006948484848462000aa260201b62000c561760201c565b60006001600160a01b0382166200073c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016200031e565b506001600160a01b031660009081526003602052604090205490565b6000620004be82846200147f565b600080620006aa856200078d6200077d8262000ac8565b6001600160e01b0316868860201c565b62000b07565b6000620004be828462001499565b80546000908190819080620007c25760008060009350935093505062000830565b6000620007e486620007d66001856200147f565b600091825260209091200190565b6040805180820190915290546001600160601b0381168083526c010000000000000000000000009091046001600160a01b03166020909201829052600196509450925062000830915050565b9193909250565b620008508484848462000b5a60201b62000c6d1760201c565b60085460ff1615620006945760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016200031e565b82546000908190801562000a3c576000620008db87620007d66001856200147f565b6040805180820190915290546001600160601b038082168084526c010000000000000000000000009092046001600160a01b0316602084015291925090871610156200096a5760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016200031e565b856001600160601b031681600001516001600160601b03161415620009d057846200099c88620007d66001866200147f565b80546001600160a01b03929092166c01000000000000000000000000026001600160601b0390921691909117905562000a2b565b604080518082019091526001600160601b0380881682526001600160a01b0380881660208085019182528b54600181018d5560008d815291909120945191519092166c01000000000000000000000000029216919091179101555b602001519250839150620006af9050565b5050604080518082019091526001600160601b0380851682526001600160a01b0380851660208085019182528854600181018a5560008a8152918220955192519093166c01000000000000000000000000029190931617920191909155905081620006af565b62000aaf84848362000be9565b620006948484848462000c9160201b62000cf51760201c565b8054600090801562000afe5762000ae683620007d66001846200147f565b5464010000000090046001600160e01b0316620004be565b60009392505050565b60008062000b448460000162000b284362000d7f60201b62000da81760201c565b62000b3e8662000dea60201b62000e111760201c565b62000e55565b6001600160e01b03918216969116945092505050565b600181111562000694576001600160a01b0384161562000ba4576001600160a01b0384166000908152600360205260408120805483929062000b9e9084906200147f565b90915550505b6001600160a01b0383161562000694576001600160a01b0383166000908152600360205260408120805483929062000bde90849062001499565b909155505050505050565b6001600160a01b03831662000c235762000c206200079360201b62000b501782600b6200076660201b62000b25179092919060201c565b50505b6001600160a01b03821662000c5d5762000c5a6200075860201b62000b191782600b6200076660201b62000b25179092919060201c565b50505b6001600160a01b038381166000908152600960205260408082205485841683529120546200027492918216911683620004d8565b6001600160a01b03831615801562000cba575062000cae62000629565b6001600160601b031682105b801562000cdf575062000cdd8260076200100b60201b62000e7a1790919060201c565b155b1562000d66578060011462000d4b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231436f6e73656375746976653a206261746368206275726e206e6f60448201526a1d081cdd5c1c1bdc9d195960aa1b60648201526084016200031e565b62000d668260076200102f60201b62000e9e1790919060201c565b62000694848484846200069460201b620009491760201c565b600063ffffffff82111562000de65760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016200031e565b5090565b60006001600160e01b0382111562000de65760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016200031e565b82546000908190801562000fb057600062000e7787620007d66001856200147f565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b03166020840152919250908716101562000efb5760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016200031e565b8563ffffffff16816000015163ffffffff16141562000f50578462000f2788620007d66001866200147f565b80546001600160e01b03929092166401000000000263ffffffff90921691909117905562000a2b565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d8152919091209451915190921664010000000002921691909117910155602001519250839150620006af9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316640100000000029190931617920191909155905081620006af565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b8280546200106690620014b4565b90600052602060002090601f0160209004810192826200108a5760008555620010d5565b82601f10620010a557805160ff1916838001178555620010d5565b82800160010185558215620010d5579182015b82811115620010d5578251825591602001919060010190620010b8565b5062000de69291505b8082111562000de65760008155600101620010de565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620011355762001135620010f4565b604052919050565b600082601f8301126200114f57600080fd5b81516001600160401b038111156200116b576200116b620010f4565b602062001181601f8301601f191682016200110a565b82815285828487010111156200119657600080fd5b60005b83811015620011b657858101830151828201840152820162001199565b83811115620011c85760008385840101525b5095945050505050565b60006001600160401b03821115620011ee57620011ee620010f4565b5060051b60200190565b600082601f8301126200120a57600080fd5b81516020620012236200121d83620011d2565b6200110a565b82815260059290921b840181019181810190868411156200124357600080fd5b8286015b84811015620012775780516001600160a01b0381168114620012695760008081fd5b835291830191830162001247565b509695505050505050565b600082601f8301126200129457600080fd5b81516020620012a76200121d83620011d2565b82815260059290921b84018101918181019086841115620012c757600080fd5b8286015b84811015620012775780516001600160601b0381168114620012ed5760008081fd5b8352918301918301620012cb565b600080600080600060a086880312156200131457600080fd5b85516001600160401b03808211156200132c57600080fd5b6200133a89838a016200113d565b965060208801519150808211156200135157600080fd5b6200135f89838a016200113d565b955060408801519150808211156200137657600080fd5b6200138489838a01620011f8565b945060608801519150808211156200139b57600080fd5b620013a989838a01620011f8565b93506080880151915080821115620013c057600080fd5b50620013cf8882890162001282565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200141f576200141f620013f2565b5060010190565b60006001600160601b038281168482168083038211156200144b576200144b620013f2565b01949350505050565b60006001600160601b0383811690831681811015620014775762001477620013f2565b039392505050565b600082821015620014945762001494620013f2565b500390565b60008219821115620014af57620014af620013f2565b500190565b600181811c90821680620014c957607f821691505b60208210811415620014eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612f6c62001541600039600061120701526000611256015260006112310152600061118a015260006111b4015260006111de0152612f6c6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635c975abb1161010457806395d89b41116100a2578063b88d4fde11610071578063b88d4fde146103d3578063c3cda520146103e6578063c87b56dd146103f9578063e985e9c51461040c57600080fd5b806395d89b41146103925780639ab24eb01461039a578063a1448194146103ad578063a22cb465146103c057600080fd5b806370a08231116100de57806370a08231146103515780637ecebe00146103645780638456cb59146103775780638e539e8c1461037f57600080fd5b80635c975abb146103205780635e3914531461032b5780636352211e1461033e57600080fd5b80633f4ba83a1161017157806342966c681161014b57806342966c68146102bb5780634f558e79146102ce578063587cde1e146102e15780635c19a95c1461030d57600080fd5b80633f4ba83a1461028d57806340c10f191461029557806342842e0e146102a857600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806323b872dd146102515780633644e515146102645780633a46b1a81461027a57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004612980565b610448565b60405190151581526020015b60405180910390f35b61020461049a565b6040516101f391906129f5565b61022461021f366004612a08565b61052c565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004612a3d565b610553565b005b61024f61025f366004612a67565b61066e565b61026c6106a0565b6040519081526020016101f3565b61026c610288366004612a3d565b6106af565b61024f6106d8565b61024f6102a3366004612a3d565b6106e2565b61024f6102b6366004612a67565b6106f0565b61024f6102c9366004612a08565b61070b565b6101e76102dc366004612a08565b61073c565b6102246102ef366004612aa3565b6001600160a01b039081166000908152600960205260409020541690565b61024f61031b366004612aa3565b610747565b60085460ff166101e7565b61024f610339366004612abe565b610752565b61022461034c366004612a08565b61075c565b61026c61035f366004612aa3565b6107bb565b61026c610372366004612aa3565b610841565b61024f61085f565b61026c61038d366004612a08565b610867565b6102046108c3565b61026c6103a8366004612aa3565b6108d2565b61024f6103bb366004612a3d565b610902565b61024f6103ce366004612b01565b61090c565b61024f6103e1366004612b48565b610917565b61024f6103f4366004612c24565b61094f565b610204610407366004612a08565b610a7c565b6101e761041a366004612c84565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061047957506001600160e01b03198216635b5e139f60e01b145b8061049457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104a990612cb7565b80601f01602080910402602001604051908101604052809291908181526020018280546104d590612cb7565b80156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b5050505050905090565b600061053782610ec7565b506000908152600460205260409020546001600160a01b031690565b600061055e8261075c565b9050806001600160a01b0316836001600160a01b031614156105d15760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105ed57506105ed813361041a565b61065f5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105c8565b6106698383610f17565b505050565b610679335b82610f85565b6106955760405162461bcd60e51b81526004016105c890612cec565b610669838383611004565b60006106aa61117d565b905090565b6001600160a01b0382166000908152600a602052604081206106d190836112a4565b9392505050565b6106e06113b2565b565b6106ec8282611404565b5050565b61066983838360405180602001604052806000815250610917565b61071433610673565b6107305760405162461bcd60e51b81526004016105c890612cec565b6107398161140e565b50565b6000610494826114bb565b336106ec81836114d8565b610669828261154a565b60008061076883611767565b90506001600160a01b0381166104945760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105c8565b60006001600160a01b0382166108255760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105c8565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0381166000908152600c6020526040812054610494565b6106e0611772565b60004382106108b85760405162461bcd60e51b815260206004820152601a60248201527f566f7465733a20626c6f636b206e6f7420796574206d696e656400000000000060448201526064016105c8565b610494600b836112a4565b6060600180546104a990612cb7565b6001600160a01b0381166000908152600a602052604081206108f3906117af565b6001600160e01b031692915050565b6106ec82826117e9565b6106ec338383611803565b6109213383610f85565b61093d5760405162461bcd60e51b81526004016105c890612cec565b610949848484846118d2565b50505050565b8342111561099f5760405162461bcd60e51b815260206004820152601860248201527f566f7465733a207369676e61747572652065787069726564000000000000000060448201526064016105c8565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610a1990610a119060a00160405160208183030381529060405280519060200120611905565b858585611953565b9050610a248161197b565b8614610a695760405162461bcd60e51b8152602060048201526014602482015273566f7465733a20696e76616c6964206e6f6e636560601b60448201526064016105c8565b610a7381886114d8565b50505050505050565b6060610a8782610ec7565b6000610a9e60408051602081019091526000815290565b90506000815111610abe57604051806020016040528060008152506106d1565b80610ac8846119a3565b604051602001610ad9929190612d39565b6040516020818303038152906040529392505050565b6001600160a01b03163b151590565b600080610b0c858585611a38565b915091505b935093915050565b60006106d18284612d7e565b600080610b0c85610b4b610b38886117af565b6001600160e01b0316868863ffffffff16565b611bea565b60006106d18284612d95565b80546000908190819080610b7b57600080600093509350935050610bdc565b6000610b9a86610b8c600185612d7e565b600091825260209091200190565b6040805180820190915290546001600160601b038116808352600160601b9091046001600160a01b031660209092018290526001965094509250610bdc915050565b9193909250565b610bef84848484610c6d565b60085460ff16156109495760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016105c8565b610c61848483611c1e565b61094984848484610cf5565b6001811115610949576001600160a01b03841615610cb3576001600160a01b03841660009081526003602052604081208054839290610cad908490612d7e565b90915550505b6001600160a01b03831615610949576001600160a01b03831660009081526003602052604081208054839290610cea908490612d95565b909155505050505050565b6001600160a01b038316158015610d1b5750610d0f611c8e565b6001600160601b031682105b8015610d2f5750610d2d600783610e7a565b155b15610da35780600114610d985760405162461bcd60e51b815260206004820152602b60248201527f455243373231436f6e73656375746976653a206261746368206275726e206e6f60448201526a1d081cdd5c1c1bdc9d195960aa1b60648201526084016105c8565b610da3600783610e9e565b610949565b600063ffffffff821115610e0d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105c8565b5090565b60006001600160e01b03821115610e0d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105c8565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b610ed0816114bb565b6107395760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105c8565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f4c8261075c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f918361075c565b9050806001600160a01b0316846001600160a01b03161480610fd857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610ffc5750836001600160a01b0316610ff18461052c565b6001600160a01b0316145b949350505050565b826001600160a01b03166110178261075c565b6001600160a01b03161461103d5760405162461bcd60e51b81526004016105c890612dad565b6001600160a01b03821661109f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105c8565b6110ac8383836001611cc0565b826001600160a01b03166110bf8261075c565b6001600160a01b0316146110e55760405162461bcd60e51b81526004016105c890612dad565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46106698383836001611ccc565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156111d657507f000000000000000000000000000000000000000000000000000000000000000046145b1561120057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60004382106112f55760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016105c8565b600061130083610da8565b8454909150600081600581111561135e57600061131c84611cd8565b6113269085612d7e565b60008981526020902090915081015463ffffffff908116908616101561134e5780915061135c565b611359816001612d95565b92505b505b600061136c88868585611dbd565b9050801561139a5761138388610b8c600184612d7e565b5464010000000090046001600160e01b031661139d565b60005b6001600160e01b031698975050505050505050565b6113ba611e13565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6106ec8282611e5c565b60006114198261075c565b9050611429816000846001611cc0565b6114328261075c565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a46106ec816000846001611ccc565b6000806114c783611767565b6001600160a01b0316141592915050565b6001600160a01b0382811660008181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610669818361154586611ece565b611ed9565b600080611555611c8e565b90506001600160601b038316156106d157303b156115db5760405162461bcd60e51b815260206004820152603a60248201527f455243373231436f6e73656375746976653a206261746368206d696e74696e6760448201527f207265737472696374656420746f20636f6e7374727563746f7200000000000060648201526084016105c8565b6001600160a01b0384166116455760405162461bcd60e51b815260206004820152602b60248201527f455243373231436f6e73656375746976653a206d696e7420746f20746865207a60448201526a65726f206164647265737360a81b60648201526084016105c8565b6113886001600160601b03841611156116ab5760405162461bcd60e51b815260206004820152602260248201527f455243373231436f6e73656375746976653a20626174636820746f6f206c6172604482015261676560f01b60648201526084016105c8565b6116ca600085836001600160601b0316866001600160601b0316611cc0565b600060016116d88584612df2565b6116e29190612e14565b90506116f060068287610afe565b50506040516001600160601b0382811682526001600160a01b038716916000918516907fdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d9060200160405180910390a461175f600086846001600160601b0316876001600160601b0316611ccc565b509392505050565b600061049482612016565b61177a61206c565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113e73390565b805460009080156117e0576117c983610b8c600184612d7e565b5464010000000090046001600160e01b03166106d1565b60009392505050565b6106ec8282604051806020016040528060008152506120b2565b816001600160a01b0316836001600160a01b031614156118655760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105c8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118dd848484611004565b6118e9848484846120e5565b6109495760405162461bcd60e51b81526004016105c890612e3c565b600061049461191261117d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611964878787876121ef565b91509150611971816122b3565b5095945050505050565b6001600160a01b0381166000908152600c602052604090208054600181018255905b50919050565b606060006119b083612401565b600101905060008167ffffffffffffffff8111156119d0576119d0612b32565b6040519080825280601f01601f1916602001820160405280156119fa576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611a335761175f565b611a04565b825460009081908015611b8e576000611a5687610b8c600185612d7e565b6040805180820190915290546001600160601b03808216808452600160601b9092046001600160a01b031660208401529192509087161015611ad45760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b60448201526064016105c8565b856001600160601b031681600001516001600160601b03161415611b2c5784611b0288610b8c600186612d7e565b80546001600160a01b0392909216600160601b026001600160601b03909216919091179055611b7e565b604080518082019091526001600160601b0380881682526001600160a01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160601b029216919091179101555b602001519250839150610b119050565b5050604080518082019091526001600160601b0380851682526001600160a01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160601b029190931617920191909155905081610b11565b600080611c0884611bfa43610da8565b611c0386610e11565b6124d9565b6001600160e01b03918216969116945092505050565b6001600160a01b038316611c3d57611c3a600b610b5083610b25565b50505b6001600160a01b038216611c5c57611c59600b610b1983610b25565b50505b6001600160a01b0383811660009081526009602052604080822054858416835291205461066992918216911683611ed9565b6000806000611c9d6006610b5c565b509150915081611cae576000611cb9565b611cb9816001612df2565b9250505090565b61094984848484610be3565b61094984848484610c56565b600081611ce757506000919050565b60006001611cf48461267c565b901c6001901b90506001818481611d0d57611d0d612e8e565b048201901c90506001818481611d2557611d25612e8e565b048201901c90506001818481611d3d57611d3d612e8e565b048201901c90506001818481611d5557611d55612e8e565b048201901c90506001818481611d6d57611d6d612e8e565b048201901c90506001818481611d8557611d85612e8e565b048201901c90506001818481611d9d57611d9d612e8e565b048201901c90506106d181828581611db757611db7612e8e565b04612710565b60005b8183101561175f576000611dd48484612726565b60008781526020902090915063ffffffff86169082015463ffffffff161115611dff57809250611e0d565b611e0a816001612d95565b93505b50611dc0565b60085460ff166106e05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c8565b303b611ec45760405162461bcd60e51b815260206004820152603160248201527f455243373231436f6e73656375746976653a2063616e2774206d696e742064756044820152703934b7339031b7b739ba393ab1ba34b7b760791b60648201526084016105c8565b6106ec8282612741565b6000610494826107bb565b816001600160a01b0316836001600160a01b031614158015611efb5750600081115b15610669576001600160a01b03831615611f89576001600160a01b0383166000908152600a602052604081208190611f3690610b1985610b25565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611f7e929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610669576001600160a01b0382166000908152600a602052604081208190611fbf90610b5085610b25565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612007929190918252602082015260400190565b60405180910390a25050505050565b6000818152600260205260408120546001600160a01b03168015158061204257506001600160601b0383115b1561204d5792915050565b612058600784610e7a565b6117e0576120676006846128c6565b6106d1565b60085460ff16156106e05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c8565b6120bc8383611404565b6120c960008484846120e5565b6106695760405162461bcd60e51b81526004016105c890612e3c565b60006001600160a01b0384163b156121e757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612129903390899088908890600401612ea4565b602060405180830381600087803b15801561214357600080fd5b505af1925050508015612173575060408051601f3d908101601f1916820190925261217091810190612ee1565b60015b6121cd573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b606091505b5080516121c55760405162461bcd60e51b81526004016105c890612e3c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ffc565b506001610ffc565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561222657506000905060036122aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561227a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122a3576000600192509250506122aa565b9150600090505b94509492505050565b60008160048111156122c7576122c7612efe565b14156122d05750565b60018160048111156122e4576122e4612efe565b14156123325760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c8565b600281600481111561234657612346612efe565b14156123945760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c8565b60038160048111156123a8576123a8612efe565b14156107395760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105c8565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106124405772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061246c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061248a57662386f26fc10000830492506010015b6305f5e10083106124a2576305f5e100830492506008015b61271083106124b657612710830492506004015b606483106124c8576064830492506002015b600a83106104945760010192915050565b8254600090819080156126225760006124f787610b8c600185612d7e565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b0316602084015291925090871610156125735760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b60448201526064016105c8565b8563ffffffff16816000015163ffffffff1614156125c3578461259b88610b8c600186612d7e565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055611b7e565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d8152919091209451915190921664010000000002921691909117910155602001519250839150610b119050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316640100000000029190931617920191909155905081610b11565b600080608083901c1561269157608092831c92015b604083901c156126a357604092831c92015b602083901c156126b557602092831c92015b601083901c156126c757601092831c92015b600883901c156126d957600892831c92015b600483901c156126eb57600492831c92015b600283901c156126fd57600292831c92015b600183901c156104945760010192915050565b600081831061271f57816106d1565b5090919050565b60006127356002848418612f14565b6106d190848416612d95565b6001600160a01b0382166127975760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105c8565b6127a0816114bb565b156127ed5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105c8565b6127fb600083836001611cc0565b612804816114bb565b156128515760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105c8565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46106ec600083836001611ccc565b8154600090816128d88585838561290e565b905081811461290257600085815260209020810154600160601b90046001600160a01b0316612905565b60005b95945050505050565b60005b8183101561175f5760006129258484612726565b6000878152602090209091506001600160601b038616908201546001600160601b0316101561296057612959816001612d95565b9350612964565b8092505b50612911565b6001600160e01b03198116811461073957600080fd5b60006020828403121561299257600080fd5b81356106d18161296a565b60005b838110156129b85781810151838201526020016129a0565b838111156109495750506000910152565b600081518084526129e181602086016020860161299d565b601f01601f19169290920160200192915050565b6020815260006106d160208301846129c9565b600060208284031215612a1a57600080fd5b5035919050565b80356001600160a01b0381168114612a3857600080fd5b919050565b60008060408385031215612a5057600080fd5b612a5983612a21565b946020939093013593505050565b600080600060608486031215612a7c57600080fd5b612a8584612a21565b9250612a9360208501612a21565b9150604084013590509250925092565b600060208284031215612ab557600080fd5b6106d182612a21565b60008060408385031215612ad157600080fd5b612ada83612a21565b915060208301356001600160601b0381168114612af657600080fd5b809150509250929050565b60008060408385031215612b1457600080fd5b612b1d83612a21565b915060208301358015158114612af657600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612b5e57600080fd5b612b6785612a21565b9350612b7560208601612a21565b925060408501359150606085013567ffffffffffffffff80821115612b9957600080fd5b818701915087601f830112612bad57600080fd5b813581811115612bbf57612bbf612b32565b604051601f8201601f19908116603f01168101908382118183101715612be757612be7612b32565b816040528281528a6020848701011115612c0057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060008060c08789031215612c3d57600080fd5b612c4687612a21565b95506020870135945060408701359350606087013560ff81168114612c6a57600080fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215612c9757600080fd5b612ca083612a21565b9150612cae60208401612a21565b90509250929050565b600181811c90821680612ccb57607f821691505b6020821081141561199d57634e487b7160e01b600052602260045260246000fd5b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351612d4b81846020880161299d565b835190830190612d5f81836020880161299d565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612d9057612d90612d68565b500390565b60008219821115612da857612da8612d68565b500190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60006001600160601b03808316818516808303821115612d5f57612d5f612d68565b60006001600160601b0383811690831681811015612e3457612e34612d68565b039392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ed7908301846129c9565b9695505050505050565b600060208284031215612ef357600080fd5b81516106d18161296a565b634e487b7160e01b600052602160045260246000fd5b600082612f3157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204d9251d570e94b20eb314a98e719a13ff2626e4373b776db273ce0c43aee380964736f6c63430008090033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_DELEGATE = "delegate";

    public static final String FUNC_DELEGATEBYSIG = "delegateBySig";

    public static final String FUNC_DELEGATES = "delegates";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETPASTTOTALSUPPLY = "getPastTotalSupply";

    public static final String FUNC_GETPASTVOTES = "getPastVotes";

    public static final String FUNC_GETVOTES = "getVotes";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTCONSECUTIVE = "mintConsecutive";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CONSECUTIVETRANSFER_EVENT = new Event("ConsecutiveTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DELEGATECHANGED_EVENT = new Event("DelegateChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DELEGATEVOTESCHANGED_EVENT = new Event("DelegateVotesChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected ERC721ConsecutiveMock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ERC721ConsecutiveMock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ERC721ConsecutiveMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ERC721ConsecutiveMock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<ConsecutiveTransferEventResponse> getConsecutiveTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CONSECUTIVETRANSFER_EVENT, transactionReceipt);
        ArrayList<ConsecutiveTransferEventResponse> responses = new ArrayList<ConsecutiveTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConsecutiveTransferEventResponse typedResponse = new ConsecutiveTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.toAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConsecutiveTransferEventResponse> consecutiveTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConsecutiveTransferEventResponse>() {
            @Override
            public ConsecutiveTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONSECUTIVETRANSFER_EVENT, log);
                ConsecutiveTransferEventResponse typedResponse = new ConsecutiveTransferEventResponse();
                typedResponse.log = log;
                typedResponse.fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fromAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.toAddress = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConsecutiveTransferEventResponse> consecutiveTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONSECUTIVETRANSFER_EVENT));
        return consecutiveTransferEventFlowable(filter);
    }

    public static List<DelegateChangedEventResponse> getDelegateChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DELEGATECHANGED_EVENT, transactionReceipt);
        ArrayList<DelegateChangedEventResponse> responses = new ArrayList<DelegateChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DelegateChangedEventResponse typedResponse = new DelegateChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.delegator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromDelegate = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.toDelegate = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelegateChangedEventResponse> delegateChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DelegateChangedEventResponse>() {
            @Override
            public DelegateChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELEGATECHANGED_EVENT, log);
                DelegateChangedEventResponse typedResponse = new DelegateChangedEventResponse();
                typedResponse.log = log;
                typedResponse.delegator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fromDelegate = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.toDelegate = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelegateChangedEventResponse> delegateChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELEGATECHANGED_EVENT));
        return delegateChangedEventFlowable(filter);
    }

    public static List<DelegateVotesChangedEventResponse> getDelegateVotesChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DELEGATEVOTESCHANGED_EVENT, transactionReceipt);
        ArrayList<DelegateVotesChangedEventResponse> responses = new ArrayList<DelegateVotesChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DelegateVotesChangedEventResponse typedResponse = new DelegateVotesChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.delegate = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelegateVotesChangedEventResponse> delegateVotesChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DelegateVotesChangedEventResponse>() {
            @Override
            public DelegateVotesChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELEGATEVOTESCHANGED_EVENT, log);
                DelegateVotesChangedEventResponse typedResponse = new DelegateVotesChangedEventResponse();
                typedResponse.log = log;
                typedResponse.delegate = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelegateVotesChangedEventResponse> delegateVotesChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELEGATEVOTESCHANGED_EVENT));
        return delegateVotesChangedEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegate(String delegatee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELEGATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, delegatee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateBySig(String delegatee, BigInteger nonce, BigInteger expiry, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELEGATEBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, delegatee), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint256(expiry), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> delegates(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DELEGATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> exists(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getPastTotalSupply(BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPASTTOTALSUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPastVotes(String account, BigInteger blockNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPASTVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getVotes(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintConsecutive(String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTCONSECUTIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint96(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ERC721ConsecutiveMock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ERC721ConsecutiveMock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ERC721ConsecutiveMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ERC721ConsecutiveMock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ERC721ConsecutiveMock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ERC721ConsecutiveMock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ERC721ConsecutiveMock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ERC721ConsecutiveMock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ERC721ConsecutiveMock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol, List<String> delegates, List<String> receivers, List<BigInteger> amounts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(delegates, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(receivers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint96>(
                        org.web3j.abi.datatypes.generated.Uint96.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint96.class))));
        return deployRemoteCall(ERC721ConsecutiveMock.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ERC721ConsecutiveMock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol, List<String> delegates, List<String> receivers, List<BigInteger> amounts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(delegates, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(receivers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint96>(
                        org.web3j.abi.datatypes.generated.Uint96.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint96.class))));
        return deployRemoteCall(ERC721ConsecutiveMock.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ERC721ConsecutiveMock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, List<String> delegates, List<String> receivers, List<BigInteger> amounts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(delegates, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(receivers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint96>(
                        org.web3j.abi.datatypes.generated.Uint96.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint96.class))));
        return deployRemoteCall(ERC721ConsecutiveMock.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ERC721ConsecutiveMock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, List<String> delegates, List<String> receivers, List<BigInteger> amounts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(delegates, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(receivers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint96>(
                        org.web3j.abi.datatypes.generated.Uint96.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint96.class))));
        return deployRemoteCall(ERC721ConsecutiveMock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class ConsecutiveTransferEventResponse extends BaseEventResponse {
        public BigInteger fromTokenId;

        public String fromAddress;

        public String toAddress;

        public BigInteger toTokenId;
    }

    public static class DelegateChangedEventResponse extends BaseEventResponse {
        public String delegator;

        public String fromDelegate;

        public String toDelegate;
    }

    public static class DelegateVotesChangedEventResponse extends BaseEventResponse {
        public String delegate;

        public BigInteger previousBalance;

        public BigInteger newBalance;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
