pragma solidity >0.4.21; 
pragma experimental ABIEncoderV2;

import "./QueueForItem.lity";
import "./StackForItem.lity";
import "./RoleLibrary.lity";

/// @author Orcun Oruc
/// @notice This is the research paper implementation of Lity rule engine
contract RolebasedModelingContract {

    mapping (string => RoleLibrary.Retailer[]) roleForRetailerType; 
    mapping (string => RoleLibrary.Wholesaler[]) roleForWholesalerType; 
    mapping (string => RoleLibrary.Producer[]) roleForProducer;

    RoleLibrary.Role[] public roles; 
    RoleLibrary.Retailer[] public retailers; 
    RoleLibrary.Wholesaler[] public wholesalers; 
    RoleLibrary.Producer[] public producers;

    constructor() public {
        
    }

    function addRole(string memory name) public {
        roleForRetailerType[name] = retailers;
    }

    function addItemToRetailer(int id, string memory name, int amountOfOrder) public{
        retailers.push(RoleLibrary.Retailer(id, name, amountOfOrder));
    }

    function addItemToWholesaler(int id, string memory name, int amountOfOrder) public{
        retailers.push(RoleLibrary.Retailer(id, name, amountOfOrder));
    }

    function addItemToProducer(int id, string memory name, int producedOrder) public{
        retailers.push(RoleLibrary.Retailer(id, name, producedOrder));
    }


    function personForProductionInteraction() public {
        //Person will put an item to stack 
        StackForItem stack; 
        stack.pushItem("item1");
        stack.pushItem("item2"); 
        stack.pushItem("item3");
        stack.popItem();
    }

    function dummyFunction(string memory input) public pure returns(string memory) {
        string memory output = eni("sample", input); 
        return output; 
    }
}


